using System;
using System.IO;               /*Gestion des fichiers*/
using System.Threading;
using System.Windows.Forms;
using System.Diagnostics;       // pour Stopwatch

namespace PSEU
{
    public partial class Form3 : Form
    {
        readonly string link;
        readonly bool logYN;
        readonly string username;
        readonly string SN;
        readonly string comments;
        readonly double glob_nbr_line;
        double current_progress = 0;
        int percent = 0;
        string log_content = "";
        readonly Form1 frm1;
        readonly Thread commands;
        bool cancel = false;
        bool fail = false;

        readonly Stopwatch sw = new Stopwatch();
        long microseconds = 0;

        public Form3(
            string _link,
            bool _logYN,
            string _username,
            string _SN,
            string _comments,
            double _glob_nbr_line,
            Form1 _frm1)
        {
            InitializeComponent();
            this.Activate();
            this.richTextBox1.LostFocus += GoTransparent;
            this.richTextBox1.GotFocus   += GoOpaque;

            link           = _link;
            logYN          = _logYN;
            username       = _username;
            SN             = _SN;
            comments       = _comments;
            glob_nbr_line  = _glob_nbr_line;
            frm1           = _frm1;

            frm1.Force_disable();
            commands = new Thread(Begin_Process);
            CheckForIllegalCrossThreadCalls = false;
            toolStripStatusLabel1.Text = "Ready";
        }

        private void GoTransparent(object sender, EventArgs e)
        {
            this.Opacity = 1;
        }

        private void GoOpaque(object sender, EventArgs e)
        {
            this.Opacity = 1;
            this.richTextBox1.BackColor = Color.Black;
        }

        private void Display_Log_Files(object sender, EventArgs e)
        {
            toolStripProgressBar1.Visible = true;
            commands.Start();
        }

        private void Begin_Process()
        {
            string date_start = DateTime.Now.ToString();
            bool success;

            richTextBox1.Text = "";
            label1.Text       = "";
            label2.Text       = "";

            richTextBox1.Click -= Display_Log_Files;

            toolStripProgressBar1.Minimum = 0;
            toolStripProgressBar1.Maximum = 100;
            toolStripProgressBar1.Value   = percent;

            toolStripStatusLabel1.Text = "Running ATP...";
            Directory.SetCurrentDirectory("./ATP");
            success = Start_Commands(link);
            Directory.SetCurrentDirectory("..");

            success &= !fail;
            toolStripStatusLabel1.Text = success
                ? "Test finished - SUCCESS !"
                : "Test finished - FAIL !";

            if (logYN)
            {
                string date_stop = DateTime.Now.ToString();
                log_write(date_start, date_stop, success);
            }
        }

        private bool Start_Commands(string link)
        {
            using var mainATPfile = new StreamReader(link);
            var lines = mainATPfile.ReadToEnd().Split('\n');
            int nbr_lines = lines.Length;
            lines[nbr_lines - 1] += "\r\n";

            for (int i = 0; i < nbr_lines; i++)
            {
                frm1.Display_feedback();

                int percent_current = (i * 100) / nbr_lines;
                label1.Text   = link + "  ";
                label11.Text  = percent_current + "%";
                label111.Text = "line nÂ° : " + (i + 1);

                current_progress++;
                percent = Convert.ToInt16((current_progress * 100) / glob_nbr_line);
                toolStripStatusLabel1.Text = $"Running ATP... ({percent}%)";
                toolStripProgressBar1.Value = percent;

                string line = lines[i];
                richTextBox1.AppendText(line);
                log_content += line + "\n";

                if (cancel)
                {
                    log_content += "\r\n>>> Test aborted by user <<<\r\n\r\n";
                    return false;
                }

                // determine start of args
                int j = (line.Length >= 3 && line[2] == ' ') ? 3 : 2;

                switch (line[0])
                {
                    case 'p':
                        HandleP(line);
                        break;
                    case 'i':
                        HandleI(line);
                        break;
                    case 's':
                        HandleS(line);
                        break;
                    case 'o':
                        HandleO(line);
                        break;
                    case '-':
                        if (!HandleDash(line, j, link, i + 1))
                            return false;
                        break;
                    default:
                        // ignore blank or unhandled
                        break;
                }
            }

            frm1.Display_feedback();
            return true;
        }

        private void HandleP(string line)
        {
            int num_IOS = line[1] - '0';
            int value   = line[3] - '0';

            if (num_IOS == 1)
            {
                frm1.alim1 = (value == 1);
                frm1.Send_Address(value == 1 ? "0" : "1", 16 + 2);
                DelayMicro(10000);
            }
            else if (num_IOS == 2)
            {
                frm1.alim2 = (value == 1);
                frm1.Send_Address(value == 1 ? "0" : "1", 16 + 3);
                DelayMicro(10000);
            }
        }

        private void HandleI(string line)
        {
            int num_IOS, value;
            if (line.Length == 5)
            {
                num_IOS = line[1] - '0';
                value   = line[3] - '0';
            }
            else
            {
                num_IOS = (line[1] - '0') * 10 + (line[2] - '0');
                value   = line[4] - '0';
            }

            frm1.Disp_force('i', num_IOS, value.ToString());
            frm1.Cde_variable(2, num_IOS - 1);
        }

        private void HandleS(string line)
        {
            int num_IOS;
            char v;
            if (line.Length == 5)
            {
                num_IOS = line[1] - '0';
                v       = line[3];
            }
            else
            {
                num_IOS = (line[1] - '0') * 10 + (line[2] - '0');
                v       = line[4];
            }

            frm1.Disp_force('s', num_IOS, v.ToString());
            frm1.Cde_variable(3, num_IOS - 1);
        }

        private void HandleO(string line)
        {
            int num_IOS;
            char v;
            if (line.Length == 5)
            {
                num_IOS = line[1] - '0';
                v       = line[3];
            }
            else
            {
                num_IOS = (line[1] - '0') * 10 + (line[2] - '0');
                v       = line[4];
            }

            frm1.Disp_force('o', num_IOS, v.ToString());
            frm1.Cde_variable(1, num_IOS - 1);
        }

        private bool HandleDash(string line, int j, string link, int lineNumber)
        {
            switch (line[1])
            {
                case 'r':
                    frm1.Cde_reset();
                    break;

                case 'g':
                    {
                        string exec_com = line.Substring(j).TrimEnd('\r', '\n') + ".ATP";
                        if (!Start_Commands(exec_com))
                            return false;
                    }
                    break;

                case '|':
                    {
                        string comment = line.Substring(j).TrimEnd('\r', '\n');
                        label2.Text = comment;
                    }
                    break;

                case '*':
                    break;

                case 'p':
                    {
                        string prompt = line.Substring(j).TrimEnd('\r', '\n');
                        if (MessageBox.Show(prompt, "Check", MessageBoxButtons.YesNo, MessageBoxIcon.Question) != DialogResult.Yes)
                        {
                            log_content += "\r\n>>> Test aborted by user <<<\r\n\r\n";
                            return false;
                        }
                    }
                    break;

                case 'w':
                    {
                        string num = line.Substring(j).TrimEnd('\r', '\n');
                        if (int.TryParse(num, out int ms))
                            DelayMicro(ms * 1000);
                    }
                    break;

                case 'c':
                    {
                        // expecting "-c oX[or XX] Y"
                        int oIdx = line.IndexOf('o');
                        if (oIdx < 0) break;
                        int num_IOS, valIdx;
                        // two-digit?
                        if (oIdx + 2 < line.Length && char.IsDigit(line[oIdx + 1]) && char.IsDigit(line[oIdx + 2]))
                        {
                            num_IOS = (line[oIdx + 1] - '0') * 10 + (line[oIdx + 2] - '0');
                            valIdx  = oIdx + 4;
                        }
                        else
                        {
                            num_IOS = (line[oIdx + 1] - '0');
                            valIdx  = oIdx + 3;
                        }

                        int value = line[valIdx] - '0';

                        bool condition = (value == 1 && !frm1.outp[num_IOS - 1])
                                         || (value == 0 && frm1.outp[num_IOS - 1]);

                        if (!condition)
                        {
                            fail = true;
                            var msg =
                                $"Test failed while calling this command line (this is not a syntax error):\n" +
                                $"{line} ({link} > line {lineNumber})\n\nDo you want to continue anyway?";
                            if (MessageBox.Show(msg, "Test failed !", MessageBoxButtons.YesNo, MessageBoxIcon.Error)
                                != DialogResult.Yes)
                            {
                                return false;
                            }
                            log_content +=
                                $"\r\n>>> Test failed with \"{line}\" ({link} > line {lineNumber}) <<<\r\n\r\n";
                        }
                    }
                    break;

                default:
                    // unhandled dash-command
                    break;
            }

            return true;
        }

        private void DelayMicro(long targetTicks)
        {
            sw.Reset();
            sw.Start();
            while (sw.ElapsedTicks / (Stopwatch.Frequency / (1_000_000L)) < targetTicks) ;
        }

        private void log_write(string date_start, string date_stop, bool success)
        {
            var logDir = "./LOG";
            Directory.SetCurrentDirectory(logDir);
            var files = Directory.GetFiles(Directory.GetCurrentDirectory());
            string last  = Path.GetFileName(files[^1]);
            int no_file  = int.Parse(Path.GetFileNameWithoutExtension(last)) + 1;
            string filename = $"{no_file}.LOG";

            using var file = new StreamWriter(filename);
            var header = new StringBuilder();
            header.AppendLine("ELDEC France");
            header.AppendLine("Automatic test C27-J PSEU");
            header.AppendLine($"User's name\t: {username}");
            header.AppendLine("Part number\t: 79A81");
            header.AppendLine($"Serial number\t: {SN}");
            header.AppendLine($"Comments\t: {comments}");
            header.AppendLine($"Command File\t: {link}");
            header.AppendLine();
            header.AppendLine($"Date\t{date_start.Split(' ')[0]}");
            header.AppendLine($"Time\t{date_start.Split(' ')[1]}");
            header.AppendLine();

            var footer = new StringBuilder();
            footer.AppendLine();
            footer.AppendLine($"Time\t{date_stop.Split(' ')[1]}");
            footer.AppendLine(success ? "Automatic Test PASSED" : "Automatic Test FAILED");
            footer.AppendLine("End of test");

            file.Write(header);
            file.Write(log_content);
            file.Write(footer);

            Directory.SetCurrentDirectory("..");
        }

        private void Form3_FormClosing(object sender, FormClosingEventArgs e)
        {
            if (commands.IsAlive)
            {
                if (MessageBox.Show("Are you sure you want to terminate the process?", "Exit?", MessageBoxButtons.YesNo, MessageBoxIcon.Question)
                    == DialogResult.Yes)
                {
                    cancel = true;
                    commands.Join();
                    frm1.Force_enable();
                    if (frm1.board != null)
                        frm1.timer_feedback.Enabled = true;
                }
                else
                {
                    e.Cancel = true;
                }
            }
            else
            {
                frm1.Force_enable();
                if (frm1.board != null)
                    frm1.timer_feedback.Enabled = true;
            }
        }
    }
}
