private bool ValidateDash(string line, string filePath, int lineNumber)
{
    // line must start with "-x â€¦"
    if (string.IsNullOrWhiteSpace(line) || line.Length < 2 || line[0] != '-')
        return false;

    char sub = line[1];
    // only handle '-c' here; all other '-' commands use your existing logic
    if (sub != 'c')
        return ValidateOtherDashCommands(line, filePath, lineNumber);

    // everything after "-c"
    string rest = line.Substring(2).Trim();
    var parts = rest.Split(new[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);
    if (parts.Length != 3)
        return false;

    // 1) ioType must be single char p|i|s|o
    string ioTypeStr = parts[0];
    if (ioTypeStr.Length != 1)
        return false;
    char ioType = char.ToLowerInvariant(ioTypeStr[0]);
    if ("piso".IndexOf(ioType) < 0)
        return false;

    // 2) channel number
    if (!int.TryParse(parts[1], out int ch))
        return false;

    // pick limits based on bench type
    bool isPCx = BenchTypeValue == "PC12" || BenchTypeValue == "PC21";
    int maxChan;
    switch (ioType)
    {
        case 'o': maxChan = isPCx ? 11 : 48; break;  // outputs
        case 'i': maxChan = isPCx ? 12 : 18; break;  // inputs
        case 's': maxChan = isPCx ? 18 : 24; break;  // sensors (LLS)
        case 'p': maxChan = 2;            break;     // bench supplies p1/p2
        default:  return false;
    }
    if (ch < 1 || ch > maxChan)
        return false;

    // 3) terminal value
    string val = parts[2];
    bool okVal;
    switch (ioType)
    {
        case 'o':
        case 'i':
        case 'p':
            // only 0 or 1 allowed
            okVal = (val == "0" || val == "1");
            break;
        case 's':
            // only single-letter f, n, m, o or s
            okVal = (val.Length == 1 && "fnmos".IndexOf(val[0]) >= 0);
            break;
        default:
            okVal = false;
            break;
    }

    if (!okVal)
        MessageBox.Show(
            this,
            $"Unrecognized check command\n\nFile: {Path.GetFileName(filePath)}\nLine: {lineNumber}\n\"{line}\"",
            "Validation Error",
            MessageBoxButtons.OK,
            MessageBoxIcon.Error
        );

    return okVal;
}
