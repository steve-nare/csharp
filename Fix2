private bool ValidateDash(string line, string filePath, int lineNumber)
{
    // Any "-|" at the very start is a commentâ€”accept it.
    if (line.StartsWith("-|", StringComparison.Ordinal))
        return true;

    // Otherwise strip the leading "-" and split on spaces
    var tokens = line.Substring(1)
                     .Trim()
                     .Split(new[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);

    if (tokens.Length == 0)
        return false;

    switch (tokens[0])
    {
        case "r":
            return tokens.Length == 1;

        case "g":
            if (tokens.Length != 2) return false;
            var atp = tokens[1].EndsWith(".ATP", StringComparison.OrdinalIgnoreCase)
                      ? tokens[1]
                      : tokens[1] + ".ATP";
            var full = Path.Combine(AtpDirectory, atp);
            if (!File.Exists(full))
            {
                MessageBox.Show(
                    this,
                    $"{atp} not found in {AtpDirectory}",
                    "Include File Missing",
                    MessageBoxButtons.OK,
                    MessageBoxIcon.Error
                );
                return false;
            }
            return true;

        case "*":
            return true;

        case "p":
            return tokens.Length >= 2;

        case "w":
            if (tokens.Length != 2) return false;
            return int.TryParse(tokens[1], out _);

        case "c":
            if (tokens.Length != 3) return false;
            if (!Regex.IsMatch(tokens[1], @"^[ois]\d{1,2}$"))
                return false;
            if (!int.TryParse(tokens[2], out var v) || (v != 0 && v != 1))
                return false;
            return true;

        default:
            return false;
    }
}
