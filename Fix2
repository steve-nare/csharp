private bool ValidateDash(string line, string filePath, int lineNumber)
{
    // must start with "-x"
    if (line.Length < 2 || line[0] != '-') return false;

    char sub = line[1];
    switch (sub)
    {
        // ... your existing cases for r, g, w, etc. ...

        case 'c':
            // format: -c <ioType> <chan> <value>
            // e.g. "-c o 14 1"
            var parts = line.Substring(2)
                            .Trim()
                            .Split(new[]{' '}, StringSplitOptions.RemoveEmptyEntries);
            if (parts.Length != 3)
                return false;

            // 1) ioType must be one of p,i,s,o
            char ioType = parts[0].ToLowerInvariant()[0];
            if ("piso".IndexOf(ioType) < 0)
                return false;

            // 2) parse channel number
            if (!int.TryParse(parts[1], out int ch))
                return false;

            // decide limits based on bench type
            bool isPCx = BenchTypeValue == "PC12" || BenchTypeValue == "PC21";
            int maxChan = ioType switch
            {
                'o' => isPCx ? 11 : 48,   // outputs
                'i' => isPCx ? 12 : 18,   // inputs
                's' => isPCx ? 18 : 24,   // sensors/LLS
                'p' =>  2,                // bench supplies p1/p2
                _   =>  0
            };
            if (ch < 1 || ch > maxChan)
                return false;

            // 3) parse expected value
            string val = parts[2];
            bool okVal = ioType switch
            {
                'o' or 'i' or 'p' => (val == "0" || val == "1"),
                's'              => (val.Length == 1 && "fnmos".Contains(val)),
                _                => false
            };
            return okVal;

        default:
            return false;
    }
}
