private bool ValidateS(string line)
{
    // sN:v or sN v, or sNN:v or sNN v, where 1 ≤ N ≤ 24 and v ∈ {f,n,m,o,s}
    var parts = line.Substring(1)
                     .Split(new[] {':',' '}, StringSplitOptions.RemoveEmptyEntries);
    if (parts.Length != 2) return false;

    if (!int.TryParse(parts[0], out var ios)) return false;
    char v = parts[1].Length > 0 ? parts[1][0] : '\0';

    return ios >= 1 && ios <= 24
        && "fnmos".Contains(v);
}

private bool ValidateO(string line)
{
    // oN:v or oN v, or oNN:v or oNN v, where 1 ≤ N ≤ 46 and v ∈ {l,o,s}
    var parts = line.Substring(1)
                     .Split(new[] {':',' '}, StringSplitOptions.RemoveEmptyEntries);
    if (parts.Length != 2) return false;

    if (!int.TryParse(parts[0], out var ios)) return false;
    char v = parts[1].Length > 0 ? parts[1][0] : '\0';

    return ios >= 1 && ios <= 46
        && "los".Contains(v);
}

private bool ValidateDash(string line, string filePath, int lineNumber)
{
    // –r, –g <name>, –|, –*, –p, –w <ms>, –c...
    if (line.Length < 2) return false;
    char sub = line[1];
    switch (sub)
    {
        case 'r': 
            return true;
        case 'g':
            // allow "-g78G002-2" or "-g 78G002-2"
            var tok = line.Substring(2).Trim();
            if (string.IsNullOrEmpty(tok)) return false;
            var includeFile = tok + ".ATP";
            return Verify_Atp(Path.Combine(AtpDirectory, includeFile));
        case '|':
        case '*':
        case 'p':
            return line.Length >= 3;
        case 'w':
            var num = line.Substring(2).Trim();
            return int.TryParse(num, out _);
        case 'c':
            return true;
        default:
            return false;
    }
}
