base on the c# code and the correspond code from C27-J pascal program can you write  a C# code that will incorporate the PC12 and PC21 code base on the pascal program

pascal program for C27-J
procedure init_sys;
  begin
    fin:=false;
    { sortie TOR PA160 }
    out0_15:=$0F00;
    out16_24:=$0C;
    portw[adr_log]:=not(out0_15);
    port[adr_log+2]:=not(out16_24);
  end;
  
procedure cde_variable;
  begin
    case ptr_menu of
    1:{ cde pour gestion sortie }
      begin
        out16_24:=out16_24 and $FE;
        port[adr_log+2]:=not(out16_24);
        out0_15:=$0F00 or adr_O[ptr_posit[1]]+1;
        portw[adr_log]:=not(out0_15);
        out0_15:=adr_O[ptr_posit[1]]+1;
        portw[adr_log]:=not(out0_15);
        out0_15:=out0_15 or $0F00;
        portw[adr_log]:=not(out0_15);
        out0_15:=$0F00 or adr_O[ptr_posit[1]];
        portw[adr_log]:=not(out0_15);
        out0_15:=adr_O[ptr_posit[1]];
        portw[adr_log]:=not(out0_15);
        out0_15:=out0_15 or $0F00;
        portw[adr_log]:=not(out0_15);
        if variable>1 then
          begin
            out16_24:=out16_24 or $01;
            port[adr_log+2]:=not(out16_24);
            out0_15:=$0F00 or adr_O[ptr_posit[1]]+1;
            portw[adr_log]:=not(out0_15);
            out0_15:=adr_O[ptr_posit[1]]+1;
            portw[adr_log]:=not(out0_15);
            out0_15:=out0_15 or $0F00;
            portw[adr_log]:=not(out0_15);
            if variable>2 then
               begin
                 out0_15:=$0F00 or adr_O[ptr_posit[1]];
                 portw[adr_log]:=not(out0_15);
                 out0_15:=adr_O[ptr_posit[1]];
                 portw[adr_log]:=not(out0_15);
                 out0_15:=out0_15 or $0F00;
                 portw[adr_log]:=not(out0_15);
               end;
          end;
      end;
    2:{ cde pour gestion entr�e }
      begin
        if ((ptr_posit[ptr_menu]=1)or(ptr_posit[ptr_menu]=3)or (1=1)) then
          if variable=2 then out16_24:=out16_24 or $01
                      else out16_24:=out16_24 and $FE
        else
          if variable=1 then out16_24:=out16_24 or $01
                      else out16_24:=out16_24 and $FE;
        port[adr_log+2]:=not(out16_24);
        out0_15:=$0F00 or adr_I[ptr_posit[2]];
        portw[adr_log]:=not(out0_15);
        out0_15:=adr_I[ptr_posit[2]];
        portw[adr_log]:=not(out0_15);
        out0_15:=out0_15 or $0F00;
        portw[adr_log]:=not(out0_15);
      end;
    3:{ cde pour gestion capteur}
      begin
        out16_24:=out16_24 and $FE;
        port[adr_log+2]:=not(out16_24);
        out0_15:=$0F00 or adr_C[ptr_posit[3]];
        portw[adr_log]:=not(out0_15);
        out0_15:=adr_C[ptr_posit[3]];
        portw[adr_log]:=not(out0_15);
        out0_15:=$0F00 or adr_C[ptr_posit[3]];
        portw[adr_log]:=not(out0_15);
        out0_15:=$0F00 or adr_C[ptr_posit[3]]+1;
        portw[adr_log]:=not(out0_15);
        out0_15:=adr_C[ptr_posit[3]]+1;
        portw[adr_log]:=not(out0_15);
        out0_15:=$0F00 or adr_C[ptr_posit[3]]+1;
        portw[adr_log]:=not(out0_15);
        out0_15:=$0F00 or adr_C[ptr_posit[3]]+2;
        portw[adr_log]:=not(out0_15);
        out0_15:=adr_C[ptr_posit[3]]+2;
        portw[adr_log]:=not(out0_15);
        out0_15:=$0F00 or adr_C[ptr_posit[3]]+2;
        portw[adr_log]:=not(out0_15);
        out0_15:=$0F00 or adr_C[ptr_posit[3]]+3;
        portw[adr_log]:=not(out0_15);
        out0_15:=adr_C[ptr_posit[3]]+3;
        portw[adr_log]:=not(out0_15);
        out0_15:=$0F00 or adr_C[ptr_posit[3]]+3;
        portw[adr_log]:=not(out0_15);
        if variable <>4 then
          begin
           out16_24:=out16_24 or $01;
           port[adr_log+2]:=not(out16_24);
           out0_15:=$0F00 or adr_C[ptr_posit[3]]+2;
           portw[adr_log]:=not(out0_15);
           out0_15:=adr_C[ptr_posit[3]]+2;
           portw[adr_log]:=not(out0_15);
           out0_15:=$0F00 or adr_C[ptr_posit[3]]+2;
           portw[adr_log]:=not(out0_15);
           out16_24:=out16_24 and $FE;
           port[adr_log+2]:=not(out16_24);
           if variable <>1 then
            begin
            out0_15:=$0F00 or adr_C[ptr_posit[3]]+variable-2;
            portw[adr_log]:=not(out0_15);
            out0_15:=adr_C[ptr_posit[3]]+variable-2;
            portw[adr_log]:=not(out0_15);
            out16_24:=out16_24 or $01;
            port[adr_log+2]:=not(out16_24);
            out0_15:=out0_15 or $0F00;
            portw[adr_log]:=not(out0_15);
            end;
          end;
      end;
    end;
  end;
  
  
  
Code for PC12 and PC21
procedure init_sys;
  begin
    fin:=false;
    { sortie TOR PA160 }
    out0_15:=0F00;
    out16_24:=0C;
    portw[adr_log]:=not(out0_15);
    port[adr_log+2]:=not(out16_24);
  end;
  
procedure cde_variable;
  begin
    case ptr_menu of
    1:{ cde pour gestion sortie }
      begin
	out16_24:=out16_24 and FE;
	port[adr_log+2]:=not(out16_24);
	out0_15:=0F00 or adr_O[ptr_posit[1]]+1;
	portw[adr_log]:=not(out0_15);
	out0_15:=adr_O[ptr_posit[1]]+1;
	portw[adr_log]:=not(out0_15);
	out0_15:=out0_15 or 0F00;
	portw[adr_log]:=not(out0_15);
	out0_15:=0F00 or adr_O[ptr_posit[1]];
	portw[adr_log]:=not(out0_15);
	out0_15:=adr_O[ptr_posit[1]];
	portw[adr_log]:=not(out0_15);
	out0_15:=out0_15 or 0F00;
	portw[adr_log]:=not(out0_15);
	if variable>1 then
	  begin
	    out16_24:=out16_24 or 01;
	    port[adr_log+2]:=not(out16_24);
	    out0_15:=0F00 or adr_O[ptr_posit[1]]+1;
	    portw[adr_log]:=not(out0_15);
	    out0_15:=adr_O[ptr_posit[1]]+1;
	    portw[adr_log]:=not(out0_15);
	    out0_15:=out0_15 or 0F00;
	    portw[adr_log]:=not(out0_15);
	    if variable>2 then
	       begin
		 out0_15:=0F00 or adr_O[ptr_posit[1]];
		 portw[adr_log]:=not(out0_15);
		 out0_15:=adr_O[ptr_posit[1]];
		 portw[adr_log]:=not(out0_15);
		 out0_15:=out0_15 or 0F00;
		 portw[adr_log]:=not(out0_15);
	       end;
	  end;
      end;
    2:{ cde pour gestion entr�e }
      begin
	if ((ptr_posit[ptr_menu]=1)or(ptr_posit[ptr_menu]=3)or (1=1)) then
	  if variable=2 then out16_24:=out16_24 or 01
		      else out16_24:=out16_24 and FE
	else
	  if variable=1 then out16_24:=out16_24 or 01
		      else out16_24:=out16_24 and FE;
	port[adr_log+2]:=not(out16_24);
	out0_15:=0F00 or adr_I[ptr_posit[2]];
	portw[adr_log]:=not(out0_15);
	out0_15:=adr_I[ptr_posit[2]];
	portw[adr_log]:=not(out0_15);
	out0_15:=out0_15 or 0F00;
	portw[adr_log]:=not(out0_15);
      end;
    3:{ cde pour gestion capteur}

      begin
	out16_24:=out16_24 and FE;
	port[adr_log+2]:=not(out16_24);
	out0_15:=0F00 or adr_O[11+ptr_posit[3]]+1;  {18 sorties de 20 � 38}
	portw[adr_log]:=not(out0_15);
	out0_15:=adr_O[11+ptr_posit[3]]+1;
	portw[adr_log]:=not(out0_15);
	out0_15:=out0_15 or 0F00;
	portw[adr_log]:=not(out0_15);
	out0_15:=0F00 or adr_O[11+ptr_posit[3]];
	portw[adr_log]:=not(out0_15);
	out0_15:=adr_O[11+ptr_posit[3]];
	portw[adr_log]:=not(out0_15);
	out0_15:=out0_15 or 0F00;
	portw[adr_log]:=not(out0_15);
	if variable>1 then
	  begin
	    out16_24:=out16_24 or 01;
	    port[adr_log+2]:=not(out16_24);
	    out0_15:=0F00 or adr_O[11+ptr_posit[3]]+1;
	    portw[adr_log]:=not(out0_15);
	    out0_15:=adr_O[11+ptr_posit[3]]+1;
	    portw[adr_log]:=not(out0_15);
	    out0_15:=out0_15 or 0F00;
	    portw[adr_log]:=not(out0_15);
	  end;
      end;
    end;
  end;
  
c# code
public void Cde_variable(int IOS, int i)
{
    /* IOS = 1 --> Output **************************/
    /* IOS = 2 --> Input ***************************/
    /* IOS = 3 --> Sensor **************************/
    /* i --> numéro de l'entrée / sortie / capteur */
    
    string cell;
    int toSend, var; //var contient 1, 2, 3, 4 ou 5 en fonction de l'état de la variable pointée
    
    switch (IOS)
    {
        /*Gestion sorties*/
        case 1:
            cell = dataGridView4.Rows[i / 16].Cells[i % 16].Value.ToString();

            if (cell.Contains("Open")) //Open
            {
                //var = 3;
                //var = 3;
                //var = 1; --> semblait OK avec les test du 04/09/13
                var = 1;
            }
            else if (cell.Contains("Load")) //Load (ETAT INITIAL DES SORTIES)
            {
                //var = 1;
                //var = 2;
                //var = 3; --> semblait OK avec les test du 04/09/13
                var = 2;
            }
            else //Short
            {
                //var = 2;
                //var = 1;
                //var = 2; --> semblait OK avec les test du 04/09/13
                var = 3;
            }
                                
            Send_Address("0", 16); //Mise à 0 du bit data

            /*** adr_O[i] + 1 ***/
            //On prépositionne l'adresse avec les 3 bits de sélection inactifs ('1')
            toSend = (Convert.ToUInt16(adr_O[i], 16) + 1) | Convert.ToUInt16("0F00", 16);
            Send_Address(Convert.ToString(toSend, 2), 0);
            //Envoie de l'adresse avec bit de sélection actif ('0')
            Send_Address(Convert.ToString(Convert.ToUInt16(adr_O[i], 16) + 1, 2), 0);
            //--> VOIR SI BESOIN DE METTRE UN DELAI ENTRE LE MOMENT OU LES 3 BITS DE SELCTION PASSENT DE ACTIFS A INACTIFS
            //On prépositionne l'adresse avec les 3 bits de sélection inactifs ('1')
            toSend = (Convert.ToUInt16(adr_O[i], 16) + 1) | Convert.ToUInt16("0F00", 16);
            Send_Address(Convert.ToString(toSend, 2), 0);

            /*** adr_O[i] ***/
            //On prépositionne l'adresse avec les 3 bits de sélection inactifs ('1')
            toSend = Convert.ToUInt16(adr_O[i], 16) | Convert.ToUInt16("0F00", 16);
            Send_Address(Convert.ToString(toSend, 2), 0);
            //Envoie de l'adresse avec bit de sélection actif ('0')
            Send_Address(Convert.ToString(Convert.ToUInt16(adr_O[i], 16), 2), 0);
            //--> VOIR SI BESOIN DE METTRE UN DELAI ENTRE LE MOMENT OU LES 3 BITS DE SELCTION PASSENT DE ACTIFS A INACTIFS
            //On prépositionne l'adresse avec les 3 bits de sélection inactifs ('1')
            toSend = Convert.ToUInt16(adr_O[i], 16) | Convert.ToUInt16("0F00", 16);
            Send_Address(Convert.ToString(toSend, 2), 0);

            if (var > 1)
            {
                Send_Address("1", 16); //Mise à 1 du bit data

                /*** adr_O[i] + 1 ***/
                //On prépositionne l'adresse avec les 3 bits de sélection inactifs ('1')
                toSend = (Convert.ToUInt16(adr_O[i], 16) + 1) | Convert.ToUInt16("0F00", 16);
                Send_Address(Convert.ToString(toSend, 2), 0);
                //Envoie de l'adresse avec bit de sélection actif ('0')
                Send_Address(Convert.ToString(Convert.ToUInt16(adr_O[i], 16) + 1, 2), 0);
                //--> VOIR SI BESOIN DE METTRE UN DELAI ENTRE LE MOMENT OU LES 3 BITS DE SELCTION PASSENT DE ACTIFS A INACTIFS
                //On prépositionne l'adresse avec les 3 bits de sélection inactifs ('1')
                toSend = (Convert.ToUInt16(adr_O[i], 16) + 1) | Convert.ToUInt16("0F00", 16);
                Send_Address(Convert.ToString(toSend, 2), 0);

                if (var > 2)
                {
                    /*** adr_O[i] ***/
                    //On prépositionne l'adresse avec les 3 bits de sélection inactifs ('1')
                    toSend = Convert.ToUInt16(adr_O[i], 16) | Convert.ToUInt16("0F00", 16);
                    Send_Address(Convert.ToString(toSend, 2), 0);
                    //Envoie de l'adresse avec bit de sélection actif ('0')
                    Send_Address(Convert.ToString(Convert.ToUInt16(adr_O[i], 16), 2), 0);
                    //--> VOIR SI BESOIN DE METTRE UN DELAI ENTRE LE MOMENT OU LES 3 BITS DE SELCTION PASSENT DE ACTIFS A INACTIFS
                    //On prépositionne l'adresse avec les 3 bits de sélection inactifs ('1')
                    toSend = Convert.ToUInt16(adr_O[i], 16) | Convert.ToUInt16("0F00", 16);
                    Send_Address(Convert.ToString(toSend, 2), 0);
                }
            }
            break;

        /*Gestion entrées*/
        case 2 :
            cell = dataGridView6.Rows[i / 16].Cells[i % 16].Value.ToString();

            if (cell.Contains("OFF")) //OFF (ETAT INITIAL DES ENTREES)
            {
                var = 1;
            }
            else //ON
            {
                var = 2;
            }

            //if (var == 2)
            if (var == 2)
            {
                Send_Address("1", 16); //Mise à 1 du bit data
            }
            else
            {
                Send_Address("0", 16); //Mise à 0 du bit data
            }

            /*** adr_I[i] ***/
            //On prépositionne l'adresse avec les 3 bits de sélection inactifs ('1')
            toSend = Convert.ToUInt16(adr_I[i], 16) | Convert.ToUInt16("0F00", 16);
            Send_Address(Convert.ToString(toSend, 2), 0);
            //Envoie de l'adresse avec bit de sélection actif ('0')
            Send_Address(Convert.ToString(Convert.ToUInt16(adr_I[i], 16), 2), 0);
            //--> VOIR SI BESOIN DE METTRE UN DELAI ENTRE LE MOMENT OU LES 3 BITS DE SELCTION PASSENT DE ACTIFS A INACTIFS
            //On prépositionne l'adresse avec les 3 bits de sélection inactifs ('1')
            toSend = Convert.ToUInt16(adr_I[i], 16) | Convert.ToUInt16("0F00", 16);
            Send_Address(Convert.ToString(toSend, 2), 0); 
            break;

        /*Gestion capteurs*/
        case 3 :
            cell = dataGridView5.Rows[i / 12].Cells[i % 12].Value.ToString();

            if (cell.Contains("Far")) //Far (ETAT INITIAL DES CAPTEURS)
            {
                //var = 4;
                //var = 5;
                var = 1;
            }
            else if (cell.Contains("Near")) //Near
            {
                //var = 5;
                //var = 4;
                var = 2;
            }
            else if (cell.Contains("Med")) //Med
            {
                //var = 3;
                //var = 3;
                var = 3;
            }
            else if (cell.Contains("Open")) //Open
            {
                //var = 1;
                //var = 2;
                var = 4;
            }
            else //Short
            {
                //var = 2;
                //var = 1;
                var = 5;
            }

            Send_Address("0", 16); //Mise à 0 du bit data

            /*** adr_C[i] ***/
            //On prépositionne l'adresse avec les 3 bits de sélection inactifs ('1')
            toSend = Convert.ToUInt16(adr_C[i], 16) | Convert.ToUInt16("0F00", 16);
            Send_Address(Convert.ToString(toSend, 2), 0);
            //Envoie de l'adresse avec bit de sélection actif ('0')
            Send_Address(Convert.ToString(Convert.ToUInt16(adr_C[i], 16), 2), 0);
            //--> VOIR SI BESOIN DE METTRE UN DELAI ENTRE LE MOMENT OU LES 3 BITS DE SELCTION PASSENT DE ACTIFS A INACTIFS
            //On prépositionne l'adresse avec les 3 bits de sélection inactifs ('1')
            toSend = Convert.ToUInt16(adr_C[i], 16) | Convert.ToUInt16("0F00", 16);
            Send_Address(Convert.ToString(toSend, 2), 0);

            /*** adr_C[i] + 1 ***/
            //On prépositionne l'adresse avec les 3 bits de sélection inactifs ('1')
            toSend = (Convert.ToUInt16(adr_C[i], 16) + 1) | Convert.ToUInt16("0F00", 16);
            Send_Address(Convert.ToString(toSend, 2), 0);
            //Envoie de l'adresse avec bit de sélection actif ('0')
            Send_Address(Convert.ToString(Convert.ToUInt16(adr_C[i], 16) + 1, 2), 0);
            //--> VOIR SI BESOIN DE METTRE UN DELAI ENTRE LE MOMENT OU LES 3 BITS DE SELCTION PASSENT DE ACTIFS A INACTIFS
            //On prépositionne l'adresse avec les 3 bits de sélection inactifs ('1')
            toSend = (Convert.ToUInt16(adr_C[i], 16) + 1) | Convert.ToUInt16("0F00", 16);
            Send_Address(Convert.ToString(toSend, 2), 0);

            /*** adr_C[i] + 2 ***/
            //On prépositionne l'adresse avec les 3 bits de sélection inactifs ('1')
            toSend = (Convert.ToUInt16(adr_C[i], 16) + 2) | Convert.ToUInt16("0F00", 16);
            Send_Address(Convert.ToString(toSend, 2), 0);
            //Envoie de l'adresse avec bit de sélection actif ('0')
            Send_Address(Convert.ToString(Convert.ToUInt16(adr_C[i], 16) + 2, 2), 0);
            //--> VOIR SI BESOIN DE METTRE UN DELAI ENTRE LE MOMENT OU LES 3 BITS DE SELCTION PASSENT DE ACTIFS A INACTIFS
            //On prépositionne l'adresse avec les 3 bits de sélection inactifs ('1')
            toSend = (Convert.ToUInt16(adr_C[i], 16) + 2) | Convert.ToUInt16("0F00", 16);
            Send_Address(Convert.ToString(toSend, 2), 0);

            /*** adr_C[i] + 3 ***/
            //On prépositionne l'adresse avec les 3 bits de sélection inactifs ('1')
            toSend = (Convert.ToUInt16(adr_C[i], 16) + 3) | Convert.ToUInt16("0F00", 16);
            Send_Address(Convert.ToString(toSend, 2), 0);
            //Envoie de l'adresse avec bit de sélection actif ('0')
            Send_Address(Convert.ToString(Convert.ToUInt16(adr_C[i], 16) + 3, 2), 0);
            //--> VOIR SI BESOIN DE METTRE UN DELAI ENTRE LE MOMENT OU LES 3 BITS DE SELCTION PASSENT DE ACTIFS A INACTIFS
            //On prépositionne l'adresse avec les 3 bits de sélection inactifs ('1')
            toSend = (Convert.ToUInt16(adr_C[i], 16) + 3) | Convert.ToUInt16("0F00", 16);
            Send_Address(Convert.ToString(toSend, 2), 0);

            if (var != 4)
            {
                Send_Address("1", 16); //Mise à 1 du bit data

                /*** adr_C[i] + 2 ***/
                //On prépositionne l'adresse avec les 3 bits de sélection inactifs ('1')
                toSend = (Convert.ToUInt16(adr_C[i], 16) + 2) | Convert.ToUInt16("0F00", 16);
                Send_Address(Convert.ToString(toSend, 2), 0);
                //Envoie de l'adresse avec bit de sélection actif ('0')
                Send_Address(Convert.ToString(Convert.ToUInt16(adr_C[i], 16) + 2, 2), 0);
                //--> VOIR SI BESOIN DE METTRE UN DELAI ENTRE LE MOMENT OU LES 3 BITS DE SELCTION PASSENT DE ACTIFS A INACTIFS
                //On prépositionne l'adresse avec les 3 bits de sélection inactifs ('1')
                toSend = (Convert.ToUInt16(adr_C[i], 16) + 2) | Convert.ToUInt16("0F00", 16);
                Send_Address(Convert.ToString(toSend, 2), 0);

                Send_Address("0", 16); //Mise à 0 du bit data

                if (var != 1)
                {
                    /*** adr_C[i] + var - 2 ***/
                    //On prépositionne l'adresse avec les 3 bits de sélection inactifs ('1')
                    toSend = (Convert.ToUInt16(adr_C[i], 16) + var - 2) | Convert.ToUInt16("0F00", 16);
                    Send_Address(Convert.ToString(toSend, 2), 0);
                    //Envoie de l'adresse avec bit de sélection actif ('0')
                    Send_Address(Convert.ToString(Convert.ToUInt16(adr_C[i], 16) + var - 2, 2), 0);
                    //--> VOIR SI BESOIN DE METTRE UN DELAI ENTRE LE MOMENT OU LES 3 BITS DE SELCTION PASSENT DE ACTIFS A INACTIFS


                    Send_Address("1", 16); //Mise à 1 du bit data

                    toSend = (Convert.ToUInt16(adr_C[i], 16) + var - 2) | Convert.ToUInt16("0F00", 16);
                    Send_Address(Convert.ToString(toSend, 2), 0);
                }
            }
            break;

        default:
            break;
    }
}
