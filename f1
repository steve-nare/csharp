using System;
using System.Diagnostics; 
using System.Drawing;
using System.IO;
using System.Threading;
using System.Windows.Forms;
using System.Text.RegularExpressions;



namespace PSEU
{
    public partial class Form1 : Form
    {
        // Define class-level fields
        private string[] adr_retour_I;
        private string[] adr_retour_O;
        private string[] adr_I;
        private string[] adr_O;
        private string[] adr_C;

        //cl_ADDIDATAVirtualBoard AD_VirtualBoard;
        //int i_NbrInput;
        public PCI16XX_NET.PCI16XX board;
        private int ioNumber;
        Form3 DispCommands;
        Thread disp_fdbk;
        public string BenchTypeValue { get; set; }

        public bool alim1, alim2;

        public bool[] inpt, outp;

        //System.Threading.Timer timer500 = new System.Threading.Timer(test);
        public System.Windows.Forms.Timer timer_feedback = new System.Windows.Forms.Timer();

        readonly Stopwatch sw = new Stopwatch();
        long microseconds = 0;

        public Form1(string BenchTypeValue)
        {
            this.BenchTypeValue = BenchTypeValue ?? "Default"; // make sure to initialized values
            bool isPCx = BenchTypeValue == "PC21" || BenchTypeValue == "PC12";
            inpt = new bool[isPCx ? 12 : 18];
            outp = new bool[isPCx ? 11 : 48];
            InitializeComponent();
            groupBox6.Text = isPCx ? "FORCE LLS" : "FORCE SENSORS";
            this.FormClosing += Form1_FormClosing;
            Init_Values(BenchTypeValue);

            Init_Cells_Content(); //Fonction qui initialise le contenu des dataGridView (onglet "Control")
            Color_Cells(); //Colotise les cellules en fonction de leur état (actif / inactif)

            timer_feedback.Tick += new EventHandler(Timer_tick); // Everytime timer ticks, Timer_tick will be called
            timer_feedback.Interval = 1000;                       // Timer will tick every X second

            /*Association de la méthode "Display_feedback" à appeler au début de ce Thread*/
            disp_fdbk = new Thread(new ThreadStart(Display_feedback));
            //disp_fdbk = new Thread(new ThreadStart(test));

            
        }

        private void Init_Values(string BenchTypeValue)
        {
            if (BenchTypeValue == "PC21" || BenchTypeValue == "PC12")
            {
                adr_retour_I = new string[] { "0641", "0637", "0636", "0638", "0639", "063A", "063B", "063C", "063D", "063E", "063F", "0640" };
                adr_retour_O = new string[] { "0602", "0603", "060A", "060B", "0612", "0613", "061A", "061B", "0622", "0623", "062A", "0600", "0601", "0608", "0609", "0610", "0611", "0618", "0619", "0620", "0621", "0628", "0629", "0606", "060E", "0604", "060C", "0614", "061C" };
                adr_I = new string[] { "0351", "0347", "0346", "0348", "0349", "034A", "034B", "034C", "034D", "034E", "034F", "0350", "0340", "0342", "0343", "0344", "0345", "0341" };
                adr_O = new string[] { "0504", "0506", "050C", "050E", "0514", "0516", "051C", "051E", "0524", "0526", "052C", "0500", "0502", "0508", "050A", "0510", "0512", "0518", "051A", "0520", "0522", "0528", "052A", "0556", "055E", "0530", "0538", "0540", "0548", "0536", "0550", "053E", "0558", "0544", "054C", "0556", "055E", "0554", "055C", "0546", "054E", "052E", "0552", "055A", "0532", "053A", "0542", "054A" };
                adr_C = new string[] { "0560", "0564", "0578", "057C", "0310", "0314", "0328", "032C", "0568", "056C", "0300", "0304", "0318", "031C", "0330", "0334", "0570", "0574", "0308", "030C", "0320", "0324", "0338", "033C" };
            }
            else
            {
                adr_retour_I = new string[] { "0630", "0637", "0631", "0638", "0639", "063A", "063B", "063C", "063D", "063E", "063F", "0640", "0641", "0632", "0633", "0634", "0635", "0636" };
                adr_retour_O = new string[] { "0600", "0601", "0608", "0609", "0610", "0611", "0618", "0619", "0620", "0621", "0628", "0629", "0606", "060E", "0604", "060C", "0614", "061C", "0602", "0603", "060A", "060B", "0612", "0613", "061A", "061B", "0622", "0623", "0607", "0624", "060F", "062C", "0616", "061E", "0627", "062F", "0626", "062E", "0617", "061F", "062A", "062B", "0625", "062D", "0605", "060D", "0615", "061D" };
                adr_I = new string[] { "0340", "0347", "0341", "0348", "0349", "034A", "034B", "034C", "034D", "034E", "034F", "0350", "0351", "0342", "0343", "0344", "0345", "0346" };
                adr_C = new string[] { "0560", "0564", "0578", "057C", "0310", "0314", "0328", "032C", "0568", "056C", "0300", "0304", "0318", "031C", "0330", "0334", "0570", "0574", "0308", "030C", "0320", "0324", "0338", "033C" };
                adr_O = new string[] { "0500", "0502", "0508", "050A", "0510", "0512", "0518", "051A", "0520", "0522", "0528", "052A", "0534", "053C", "0530", "0538", "0540", "0548", "0504", "0506", "050C", "050E", "0514", "0516", "051C", "051E", "0524", "0526", "0536", "0550", "053E", "0558", "0544", "054C", "0556", "055E", "0554", "055C", "0546", "054E", "052C", "052E", "0552", "055A", "0532", "053A", "0542", "054A" };
            }
        }
       
        private void Form1_Load(object sender, EventArgs e)
        {
            int returnValue;
            ushort ioCount = 0;

            sw.Reset();
            sw.Start();

            // Construct the board object
            this.board = PCI16XX_NET.PCI16XX.OpenBoard(0);

            // Check the result
            if (this.board == null)
            {
                //MessageBox.Show("Error while opening board 0");
                this.board = PCI16XX_NET.PCI16XX.OpenBoard(1);

                if (this.board == null)
                {
                    //MessageBox.Show("Error while opening board 1");
                    this.board = PCI16XX_NET.PCI16XX.OpenBoard(2);

                    if (this.board == null)
                    {
                        //MessageBox.Show("Error while opening board 2");
                        this.board = PCI16XX_NET.PCI16XX.OpenBoard(3);

                        if (this.board == null)
                        {
                            //MessageBox.Show("Error while opening board 3");

                            DialogResult dialogResult = MessageBox.Show("No APCI-1648 card was detected on your computer!\nDo you still want run the program?\n(errors may occur)", "PCI-1648 not detected", MessageBoxButtons.YesNo, MessageBoxIcon.Error);
                            if (dialogResult == DialogResult.No)
                            {
                                this.Close();
                            }
                            return;
                        }
                    }
                }
            }
            
            // Set the output memory to on - Obligatoire pour pouvoir utiliser les fonctions qui font des off
            if ((returnValue = board.SetDigitalOutputMemoryOn()) != 0)
            {
                MessageBox.Show("Error while setting output memory to on : " + returnValue);
                this.Close();
                return;
            }

            // Get the number of ios
            if ((returnValue = board.GetDigitalInputOutputNbr(ref ioCount)) != 0)
            {
                MessageBox.Show("GetDigitalInputOutputNbr error : " + returnValue);
                this.Close();
                return;
            }
            this.ioNumber = (int)ioCount;

            
            /**********************************************/
            /* Port 0: input 0 to 31 **********************/
            /* Port 1: input 32 to 63 (to 47 for PCI1648) */
            /**********************************************/

            // Set Port 0 as output
            this.board.SetPortConfiguration(0, 0xFFFFFFFF);

            // Set Port 1 as input
            this.board.SetPortConfiguration(1, 0x0);

            /*Initialisation du système*/
            Init_sys();
            Cde_reset();
            Display_feedback(); //Initialise, entre autres, les tableaux outp et inpt
            
            if (this.board != null)
            {
                timer_feedback.Enabled = true; //Enable the timer
            }
        }

        public void Init_sys()
        {
            Send_Address("0000111100000000", 0); //Initialisation des bits "d'adresse" et désactivation des 3 bits "d'enable" des décodeurs
            Send_Address("00001100", 16); //Reset du système
        }

        public void Timer_tick(object sender, EventArgs e)
        {
            if (disp_fdbk.IsAlive)
            {
                disp_fdbk.Join(); //Si le thread est encore en marche, on attend sa fin
            }
            disp_fdbk = new Thread(new ThreadStart(Display_feedback)); //Le thread étant terminé, on le réinitialise
            //disp_fdbk = new Thread(new ThreadStart(test));
            disp_fdbk.Start(); //Départ du thread qui va afficher les retours
        }

        /***** Appuie sur le bouton Apply *****/
        private void Apply_button(object sender, EventArgs e)
        {
            string tosendlist = "";
            string[] send;
            char IOS;
            int number;
            //string value;

            button2.Enabled = false;
            bool isPCx = BenchTypeValue == "PC21" || BenchTypeValue == "PC12";
            UInt16 load_force = (UInt16)(isPCx ? 11 : 48);
            UInt16 force_sensor = (UInt16)(isPCx ? 18 : 24);
            UInt16 force_input = (UInt16)(isPCx ? 12 : 18);

            timer_feedback.Enabled = false; //désactivation du timer d'affichage des retours en mode manuel
            if (disp_fdbk.IsAlive)
            {
                disp_fdbk.Join(); //Si le thread est encore en marche, on attend sa fin
            }

            /*Récupération de force LOAD*/
            for (int i = 0; i < load_force; i++)
            {
                if (dataGridView4.Rows[i / 16].Cells[i % 16].Style.BackColor == System.Drawing.Color.Yellow)
                {
                    tosendlist += dataGridView4.Rows[i / 16].Cells[i % 16].Value.ToString() + "\n";
                    dataGridView4.Rows[i / 16].Cells[i % 16].Style.BackColor = System.Drawing.Color.Wheat;
                    dataGridView4.DefaultCellStyle.SelectionBackColor = System.Drawing.Color.Wheat;
                }
            }

            /*Récupération de force SENSORS*/
            for (int i = 0; i < force_sensor; i++)
            {
                if (dataGridView5.Rows[i / 12].Cells[i % 12].Style.BackColor == System.Drawing.Color.Yellow)
                {
                    tosendlist += dataGridView5.Rows[i / 12].Cells[i % 12].Value.ToString() + "\n";
                    dataGridView5.Rows[i / 12].Cells[i % 12].Style.BackColor = System.Drawing.Color.Wheat;
                    dataGridView5.DefaultCellStyle.SelectionBackColor = System.Drawing.Color.Wheat;
                }
            }

            /*Récupéraiton de force INPUT*/
            for (int i = 0; i < force_input; i++)
            {
                if (dataGridView6.Rows[i / 16].Cells[i % 16].Style.BackColor == System.Drawing.Color.Yellow)
                {
                    tosendlist += dataGridView6.Rows[i / 16].Cells[i % 16].Value.ToString() + "\n";
                    dataGridView6.Rows[i / 16].Cells[i % 16].Style.BackColor = System.Drawing.Color.Wheat;
                    dataGridView6.DefaultCellStyle.SelectionBackColor = System.Drawing.Color.Wheat;
                }
            }

            send = tosendlist.Split('\n');
            for (int i = 0; i < send.Length - 1; i++)
            {
                var line = send[i];
                if (string.IsNullOrWhiteSpace(line)) continue;

                // 1) split header ("Wet1" / "S03" / "O12" / etc) from value
                var parts = line.Split(':');
                if (parts.Length < 2) continue;
                var header = parts[0];              // e.g. "Wet1" or "S03" or "O05"
                var digits = Regex.Match(header, @"\d+").Value;
                if (!int.TryParse(digits, out int num)) continue;

                number = num - 1;

                if (isPCx && Regex.IsMatch(header, @"^(Wet|SH|Op)\d+"))
                {
                    IOS = 'S';
                }
                else
                {
                    // fall back to first letter of header: S, O or I
                    IOS = header[0];
                }

                // 3) call your existing Cde_variable
                switch (IOS)
                {
                    case 'O':
                        Cde_variable(1, number);
                        break;
                    case 'I':
                        Cde_variable(2, number);
                        break;
                    case 'S':
                        Cde_variable(3, number);
                        break;
                    default:
                        break;
                }
            }

            //Thread.Sleep(10);
            //attente de 10000 microsecondes (plus stable que la fonction Sleep() et DateTime.Now)
            sw.Reset(); sw.Start();
            microseconds = sw.ElapsedTicks / (Stopwatch.Frequency / (1000L * 1000L));
            while (microseconds < 10000) { microseconds = sw.ElapsedTicks / (Stopwatch.Frequency / (1000L * 1000L)); }
            Display_feedback();
            timer_feedback.Enabled = true; //réactivation du timer d'affichage des retours en mode manuel
        }

        /*Appuie sur le bouton "Auto"*/
        private void Auto_button(object sender, EventArgs e)
        {
            string link;
            bool logYN;
            string username;
            string serialnumber;
            string comments;
            double glob_nbr_line;

            if (button4.Text == "Auto")
            {
                timer_feedback.Enabled = false; //désactivation du timer d'affichage des retours en mode manuel
                Form2 ConfAutoDialog = new Form2(this.BenchTypeValue);

                if (ConfAutoDialog.ShowDialog() == System.Windows.Forms.DialogResult.OK)
                {
                    /*Récupération de la saisie utilisateur (Form2)*/
                    link = ConfAutoDialog.Return_Link();
                    logYN = ConfAutoDialog.Return_LogYN();
                    username = ConfAutoDialog.Return_User_Name();
                    serialnumber = ConfAutoDialog.Return_SN();
                    comments = ConfAutoDialog.Return_Comments();
                    glob_nbr_line = ConfAutoDialog.Return_Glob_Nbr_Line();

                    toolStripStatusLabel1.Text = "Automatic mode";

                    /*Passage d'une référence de la fenêtre 1 à la fenêtre 3 (accès à la fonction de màj retours)*/
                    DispCommands = new Form3(link, logYN, username, serialnumber, comments, glob_nbr_line, this);
                    //DispCommands.TopMost = true; //Fenêtre toujours au premier plan
                    DispCommands.Show();
                }
                else
                {
                    if (this.board != null)
                    {
                        timer_feedback.Enabled = true; //réactivation du timer d'affichage des retours en mode manuel
                    }
                }
            }
        }

        /*Fonction qui met à jour l'affichage des retours - affichage et envoie de commandes pour la lecture des I/O lecture*/
        public void Display_feedback()
        {
            byte data = 0; //Données lue
            int toSend;

            Read_supply_status(); //Fonction qui va lire le status et mettre à jour l'affichage des alims

            Send_Address("111", 8); //Désactivation des 3 bits d'enable des décodeurs

            bool isPCx = BenchTypeValue == "PC21" || BenchTypeValue == "PC12";
            UInt16 ctrl_input = (UInt16)(isPCx ? 12 : 18);
            UInt16 ctrl_output = (UInt16)(isPCx ? 11 : 48);

            /*Contrôle retour des entrées*/
            for (int i = 0; i < ctrl_input; i++)
            {
                /*** adr_retour_I[i] ***/
                //On prépositionne l'adresse avec les 3 bits de sélection inactifs ('1')
                toSend = Convert.ToUInt16(adr_retour_I[i], 16) | Convert.ToUInt16("0F00", 16);
                Send_Address(Convert.ToString(toSend, 2), 0);
                //Envoie de l'adresse avec bit de sélection actif ('0')
                Send_Address(Convert.ToString(Convert.ToUInt16(adr_retour_I[i], 16), 2), 0);
                //Thread.Sleep(10);
                //attente de 10000 microsecondes (plus stable que la fonction Sleep() et DateTime.Now)
                sw.Reset(); sw.Start();
                microseconds = sw.ElapsedTicks / (Stopwatch.Frequency / (1000L * 1000L));
                while (microseconds < 10000) { microseconds = sw.ElapsedTicks / (Stopwatch.Frequency / (1000L * 1000L)); }
                //Lecture du bit "data"
                if (this.board != null)
                {
                    board.Read1DigitalInput(32, ref data);
                }   
                //On prépositionne l'adresse avec les 3 bits de sélection inactifs ('1')
                toSend = Convert.ToUInt16(adr_retour_I[i], 16) | Convert.ToUInt16("0F00", 16);
                Send_Address(Convert.ToString(toSend, 2), 0);

                if (!(Convert.ToBoolean(data)))
                {
                    inpt[i] = false;
                    dataGridView2.Rows[i / 16].Cells[i % 16].Value = dataGridView2.Rows[i / 16].Cells[i % 16].Value.ToString().Replace(":1", ":0");
                }
                else
                {
                    inpt[i] = true;
                    dataGridView2.Rows[i / 16].Cells[i % 16].Value = dataGridView2.Rows[i / 16].Cells[i % 16].Value.ToString().Replace(":0", ":1");
                }
            }
            
            /*Contrôle retour des sorties*/
            for (int i = 0; i < ctrl_output; i++)
            {
                /*** adr_retour_O[i] ***/
                //On prépositionne l'adresse avec les 3 bits de sélection inactifs ('1')
                toSend = Convert.ToUInt16(adr_retour_O[i], 16) | Convert.ToUInt16("0F00", 16);
                Send_Address(Convert.ToString(toSend, 2), 0);
                //Envoie de l'adresse avec bit de sélection actif ('0')
                Send_Address(Convert.ToString(Convert.ToUInt16(adr_retour_O[i], 16), 2), 0);
                //Thread.Sleep(0); //REMPLACE LE i=i DE L'ANCIEN PROGRAMME
                //attente de 1000 microsecondes (plus stable que la fonction Sleep() et DateTime.Now)
                sw.Reset(); sw.Start();
                microseconds = sw.ElapsedTicks / (Stopwatch.Frequency / (1000L * 1000L));
                while (microseconds < 1000) { microseconds = sw.ElapsedTicks / (Stopwatch.Frequency / (1000L * 1000L)); }
                //Lecture du bit "data"
                if (this.board != null)
                {
                    board.Read1DigitalInput(32, ref data);
                }   
                //On prépositionne l'adresse avec les 3 bits de sélection inactifs ('1')
                toSend = Convert.ToUInt16(adr_retour_O[i], 16) | Convert.ToUInt16("0F00", 16);
                Send_Address(Convert.ToString(toSend, 2), 0);

                if (!(Convert.ToBoolean(data)))
                {
                    outp[i] = false;
                    dataGridView3.Rows[i / 16].Cells[i % 16].Value = dataGridView3.Rows[i / 16].Cells[i % 16].Value.ToString().Replace(":1", ":0");
                }
                else
                {
                    outp[i] = true;
                    dataGridView3.Rows[i / 16].Cells[i % 16].Value = dataGridView3.Rows[i / 16].Cells[i % 16].Value.ToString().Replace(":0", ":1");
                }
            }
            Color_Cells();
        }

        /*Fonction qui met à jour les IOS de forçage - uniquement de l'affichage, pas d'envoie de commandes*/
        public void Disp_force(char IOS, int number, string value)
        {
            int index;
            string cell;
            bool isPCx = BenchTypeValue == "PC21" || BenchTypeValue == "PC12";

            number--;

            if (IOS == 'p')
            {
                cell = dataGridView1.Rows[0].Cells[number].Value.ToString();
                index = cell.IndexOf(':');
                cell = cell.Remove(index + 1, cell.Length - 1 - index) + value;
                dataGridView1.Rows[0].Cells[number].Value = cell;
                
                dataGridView1.CurrentCell = dataGridView1.Rows[0].Cells[number];
                dataGridView1.DefaultCellStyle.SelectionBackColor = Color.Khaki;
                dataGridView1.Refresh();
            }

            if(isPCx)
            {
                switch (value)
                {
                    case "n":
                        value = "No";
                        break;
                    case "y":
                        value = "Yes";
                        break;
                    case "0":
                        value = "OFF";
                        break;
                    case "1":
                        value = "ON";
                        break;
                    default:
                        break;
                }
            }
            else
            {
                switch (value)
                {
                    case "f":
                        value = "Far";
                        break;
                    case "n":
                        value = "Near";
                        break;
                    case "m":
                        value = "Medium";
                        break;
                    case "o":
                        value = "Open";
                        break;
                    case "s":
                        value = "Short";
                        break;
                    case "l":
                        value = "Load";
                        break;
                    case "0":
                        value = "OFF";
                        break;
                    case "1":
                        value = "ON";
                        break;
                    default:
                        break;
                }
            }
            

            switch (IOS)
            {
                case 'o':
                    cell = dataGridView4.Rows[number / 16].Cells[number % 16].Value.ToString();
                    index = cell.IndexOf(':');
                    cell = cell.Remove(index + 1, cell.Length - 1 - index) + value;
                    dataGridView4.Rows[number / 16].Cells[number % 16].Value = cell;
                    
                    dataGridView4.CurrentCell = dataGridView4.Rows[number / 16].Cells[number % 16];
                    dataGridView4.DefaultCellStyle.SelectionBackColor = Color.Khaki;
                    dataGridView4.Refresh();
                    break;
                case 's':
                    cell = dataGridView5.Rows[number / 12].Cells[number % 12].Value.ToString();
                    index = cell.IndexOf(':');
                    cell = cell.Remove(index + 1, cell.Length - 1 - index) + value;
                    dataGridView5.Rows[number / 12].Cells[number % 12].Value = cell;

                    dataGridView5.CurrentCell = dataGridView5.Rows[number / 12].Cells[number % 12];
                    dataGridView5.DefaultCellStyle.SelectionBackColor = Color.Khaki;
                    dataGridView5.Refresh();
                    break;
                case 'i':
                    cell = dataGridView6.Rows[number / 16].Cells[number % 16].Value.ToString();
                    index = cell.IndexOf(':');
                    cell = cell.Remove(index + 1, cell.Length - 1 - index) + value;
                    dataGridView6.Rows[number / 16].Cells[number % 16].Value = cell;

                    dataGridView6.CurrentCell = dataGridView6.Rows[number / 16].Cells[number % 16];
                    dataGridView6.DefaultCellStyle.SelectionBackColor = Color.Khaki;
                    dataGridView6.Refresh();
                    break;
                default:
                    break;
            }
        }

        /*Fonction qui désactive la sélection de forçage manuelle*/
        public void Force_disable()
        {
            dataGridView4.Enabled = false;
            Init_F_LOAD_Cells();
            dataGridView5.Enabled = false;
            Init_F_SENSORS_Cells();
            dataGridView6.Enabled = false;
            Init_F_INPUT_Cells();
            button2.Enabled = false;

            dataGridView1.Enabled = false;

            button3.Enabled = false;
            button5.Enabled = false;
            button6.Enabled = false;
            button7.Enabled = false;

            button4.Enabled = false;
        }

        /*Fonction qui active la sélection de forçage manuelle*/
        public void Force_enable()
        {
            dataGridView4.Enabled = true;
            //Init_F_LOAD_Cells();
            dataGridView5.Enabled = true;
            //Init_F_SENSORS_Cells();
            dataGridView6.Enabled = true;
            //Init_F_INPUT_Cells();
            dataGridView1.DefaultCellStyle.SelectionBackColor = Color.White;

            dataGridView1.Enabled = true;

            button3.Enabled = true;
            button5.Enabled = true;
            button6.Enabled = true;
            button7.Enabled = true;

            button4.Enabled = true;
        }

        private void ToolStripStatusLabel1_Click(object sender, EventArgs e)
        {
            toolStripStatusLabel1.Text = "OK";
        }

        private void Control_Panel_Supply(object sender, DataGridViewCellEventArgs e)
        {
            if ((dataGridView1.CurrentCell.ColumnIndex == 2) || (dataGridView1.CurrentCell.ColumnIndex == 3))
            {
                timer_feedback.Enabled = false; //désactivation du timer d'affichage des retours en mode manuel
                if (disp_fdbk.IsAlive)
                {
                    disp_fdbk.Join(); //Si le thread est encore en marche, on attend sa fin
                }

                if (dataGridView1.CurrentCell.ColumnIndex == 2)
                {
                    alim1 = !alim1;

                    if (alim1)
                    {
                        Send_Address("0", 16 + 2); //Activation alim1
                    }
                    else
                    {
                        Send_Address("1", 16 + 2); //Désactivation alim1
                    }

                    //Thread.Sleep(10);
                    //attente de 10000 microsecondes (plus stable que la fonction Sleep() et DateTime.Now)
                    sw.Reset(); sw.Start();
                    microseconds = sw.ElapsedTicks / (Stopwatch.Frequency / (1000L * 1000L));
                    while (microseconds < 10000) { microseconds = sw.ElapsedTicks / (Stopwatch.Frequency / (1000L * 1000L)); }
                    Display_feedback();
                }
                else if (dataGridView1.CurrentCell.ColumnIndex == 3)
                {
                    alim2 = !alim2;

                    if (alim2)
                    {
                        Send_Address("0", 16 + 3); //Activation alim2
                    }
                    else
                    {
                        Send_Address("1", 16 + 3); //Désactivation alim2
                    }

                    //Thread.Sleep(10);
                    //attente de 10000 microsecondes (plus stable que la fonction Sleep() et DateTime.Now)
                    sw.Reset(); sw.Start();
                    microseconds = sw.ElapsedTicks / (Stopwatch.Frequency / (1000L * 1000L));
                    while (microseconds < 10000) { microseconds = sw.ElapsedTicks / (Stopwatch.Frequency / (1000L * 1000L)); }
                    Display_feedback();
                }

                timer_feedback.Enabled = true; //réactivation du timer d'affichage des retours en mode manuel
            }
        }

        /*Sélection des états des forçage des sorties*/
        private void Control_Panel_Force_Load(object sender, DataGridViewCellEventArgs e)
        {
            if (dataGridView4.CurrentCell.Value.ToString().Contains("Open"))
            {
                dataGridView4.CurrentCell.Value = dataGridView4.CurrentCell.Value.ToString().Replace("Open", "Load");
            }
            else if (dataGridView4.CurrentCell.Value.ToString().Contains("Load"))
            {
                dataGridView4.CurrentCell.Value = dataGridView4.CurrentCell.Value.ToString().Replace("Load", "Short");
            }
            else
            {
                dataGridView4.CurrentCell.Value = dataGridView4.CurrentCell.Value.ToString().Replace("Short", "Open");
            }
            dataGridView4.DefaultCellStyle.SelectionBackColor = System.Drawing.Color.Yellow;
            dataGridView4.CurrentCell.Style.BackColor = System.Drawing.Color.Yellow;
            button2.Enabled = true;
        }

        /*Sélection des états des forçage des capteurs*/
        private void Control_Panel_Force_Sensors(object sender, DataGridViewCellEventArgs e)
        {
            var cell = dataGridView5.CurrentCell;
            if (cell == null) return;

            string txt = cell.Value?.ToString() ?? "";

            if (BenchTypeValue == "PC12" || BenchTypeValue == "PC21")
            {
                if (txt.EndsWith("NO"))
                    cell.Value = txt.Replace("NO", "YES");
                else
                    cell.Value = txt.Replace("YES", "NO");
            }
            else
            {
                if (txt.Contains("Far")) cell.Value = txt.Replace("Far", "Near");
                else if (txt.Contains("Near")) cell.Value = txt.Replace("Near", "Med");
                else if (txt.Contains("Med")) cell.Value = txt.Replace("Med", "Open");
                else if (txt.Contains("Open")) cell.Value = txt.Replace("Open", "Short");
                else cell.Value = txt.Replace("Short", "Far");
            }
            dataGridView5.DefaultCellStyle.SelectionBackColor = System.Drawing.Color.Yellow;
            dataGridView5.CurrentCell.Style.BackColor = System.Drawing.Color.Yellow;
            button2.Enabled = true;
        }

        /*Sélection des états des forçage des entrées*/
        private void Control_Panel_Force_Input(object sender, DataGridViewCellEventArgs e)
        {
            if (dataGridView6.CurrentCell.FormattedValue.ToString() != "") //Condition qui permet de ne pas accéder au contenu des cellules vides
            {
                if (dataGridView6.CurrentCell.Value.ToString().Contains("ON"))
                {
                    dataGridView6.CurrentCell.Value = dataGridView6.CurrentCell.Value.ToString().Replace("ON", "OFF");
                }
                else
                {
                    dataGridView6.CurrentCell.Value = dataGridView6.CurrentCell.Value.ToString().Replace("OFF", "ON");
                }
                dataGridView6.DefaultCellStyle.SelectionBackColor = System.Drawing.Color.Yellow;
                dataGridView6.CurrentCell.Style.BackColor = System.Drawing.Color.Yellow;
                button2.Enabled = true;
            }
            else
            {
                dataGridView6.DefaultCellStyle.SelectionBackColor = System.Drawing.Color.White;
            }
        }

        /*(1/2) Evénement appelé lorsque qu'un élément de l'onglet "Control" est redimentionné*/
        private void Panel7_Layout(object sender, LayoutEventArgs e)
        {
            /*Redimentionnement des polices des 6 tableaux présents dans l'onglet "control"*/
            if (tabControl1.Size.Width < 900)
            {
                panel2.Font = new Font("Verdana", 6f, FontStyle.Regular);
                panel3.Font = new Font("Verdana", 6f, FontStyle.Regular);
                panel4.Font = new Font("Verdana", 6f, FontStyle.Regular);
                panel5.Font = new Font("Verdana", 6f, FontStyle.Regular);
                panel6.Font = new Font("Verdana", 6f, FontStyle.Regular);
                panel7.Font = new Font("Verdana", 6f, FontStyle.Regular);
            }
            else if (tabControl1.Size.Width > 900 && tabControl1.Size.Width < 1200)
            {
                panel2.Font = new Font("Verdana", 8f, FontStyle.Regular);
                panel3.Font = new Font("Verdana", 8f, FontStyle.Regular);
                panel4.Font = new Font("Verdana", 8f, FontStyle.Regular);
                panel5.Font = new Font("Verdana", 8f, FontStyle.Regular);
                panel6.Font = new Font("Verdana", 8f, FontStyle.Regular);
                panel7.Font = new Font("Verdana", 8f, FontStyle.Regular);
            }
            else
            {
                panel2.Font = new Font("Verdana", 9f, FontStyle.Regular);
                panel3.Font = new Font("Verdana", 9f, FontStyle.Regular);
                panel4.Font = new Font("Verdana", 9f, FontStyle.Regular);
                panel5.Font = new Font("Verdana", 9f, FontStyle.Regular);
                panel6.Font = new Font("Verdana", 9f, FontStyle.Regular);
                panel7.Font = new Font("Verdana", 9f, FontStyle.Regular);
            }

            /*Redimentionnement des lignes des 6 tableaux présents dans l'onglet "control"*/
            foreach (DataGridViewRow row in dataGridView1.Rows)
            {
                row.Height = (panel2.Height) / (dataGridView1.RowCount) - 2;
            }

            foreach (DataGridViewRow row in dataGridView2.Rows)
            {
                row.Height = (panel3.Height) / (dataGridView2.RowCount) - 1;
            }

            foreach (DataGridViewRow row in dataGridView3.Rows)
            {
                row.Height = (panel4.Height) / (dataGridView3.RowCount);
            }

            foreach (DataGridViewRow row in dataGridView4.Rows)
            {
                row.Height = (panel5.Height) / (dataGridView4.RowCount) - 1;
            }

            foreach (DataGridViewRow row in dataGridView5.Rows)
            {
                row.Height = (panel6.Height) / (dataGridView5.RowCount) - 1;
            }

            foreach (DataGridViewRow row in dataGridView6.Rows)
            {
                row.Height = (panel7.Height) / (dataGridView6.RowCount) - 1;
            }

            /*Redimentionnement de la largeur des colonnes des 6 tableaux présents dans l'onglet "control"*/
            foreach (DataGridViewColumn Col in dataGridView1.Columns)
            {
                Col.Width = (panel2.Width) / (dataGridView1.Columns.Count);
            }

            foreach (DataGridViewColumn Col in dataGridView2.Columns)
            {
                Col.Width = (panel3.Width) / (dataGridView2.Columns.Count);
            }

            foreach (DataGridViewColumn Col in dataGridView3.Columns)
            {
                Col.Width = (panel4.Width) / (dataGridView3.Columns.Count);
            }

            foreach (DataGridViewColumn Col in dataGridView4.Columns)
            {
                Col.Width = (panel5.Width) / (dataGridView4.Columns.Count);
            }

            foreach (DataGridViewColumn Col in dataGridView5.Columns)
            {
                Col.Width = (panel6.Width) / (dataGridView5.Columns.Count);
            }
            
            foreach (DataGridViewColumn Col in dataGridView6.Columns)
            {
                Col.Width = (panel7.Width) / (dataGridView6.Columns.Count);
            }
        }

        /*(2/2) Evénement appelé lorsque qu'un élément de l'onglet "Control" est redimentionné*/
        private void Panel7_SizeChanged(object sender, EventArgs e)
        {
            foreach (DataGridViewColumn Col in dataGridView6.Columns)
            {
                Col.Width = (panel7.Width) / (dataGridView6.Columns.Count);
            }
        }

        /*Evénement appelé quand on appuie sur une touche dans la fenêtre principale*/
        private void Control_Panel_KeyUp(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.F1)
            {
                dataGridView1.CurrentCell = dataGridView1.Rows[0].Cells[2];
                Control_Panel_Supply(null, null); //Appel de commandes éxécutées lors d'un appuie sur le bouton d'alim1
            }
            else if (e.KeyCode == Keys.F2)
            {
                dataGridView1.CurrentCell = dataGridView1.Rows[0].Cells[3];
                Control_Panel_Supply(null, null); //Appel de commandes éxécutées lors d'un appuie sur le bouton d'alim2
            }
            else if (e.KeyCode == Keys.F3)
            {
                Reset_button(null, null); //Appel de commandes éxécutées lors d'un appuie sur le bouton reset
            }
            else if (e.KeyCode == Keys.F9)
            {
                if (button2.Enabled)
                {
                    Apply_button(null, null); //Raccouci vers le bouton Apply
                }
            }
        }

        /*Fonction qui initialise le contenu des dataGridView (onglet "Control")*/
        public void Init_Cells_Content()
        {
            string cells_content;
            toolStripStatusLabel1.Text = "Ready";

            /*Contenu par défaut de "SUPPLY"*/
            dataGridView1.Rows[0].Cells[0].Value = "+28Vdc-1:1";
            dataGridView1.Rows[0].Cells[1].Value = "+28Vdc-2:1";
            dataGridView1.Rows[0].Cells[2].Value = "BENCH supply1:1 / OFF";
            dataGridView1.Rows[0].Cells[3].Value = "BENCH supply2:1 / OFF";

            bool isPCx = BenchTypeValue == "PC21" || BenchTypeValue == "PC12";
            UInt16 ctrl_input = (UInt16)(isPCx ? 12 : 18);
            UInt16 ctrl_output = (UInt16)(isPCx ? 11 : 48);

            /*Contenu par défaut de "CONTROL INPUT VOLTAGE"*/
            dataGridView2.Rows.Add(1);
            for (int i = 0; i < ctrl_input; i++)
            {
                cells_content = "!I";
                if (i < 9) //if qui sert à placer un "0" devant le numéro de l'E/S/C si < 10
                {
                    cells_content += "0";
                }
                cells_content += ((i + 1) + ":0");
                dataGridView2.Rows[i / 16].Cells[i % 16].Value = cells_content;
            }

            dataGridView2.Rows[0].Cells[0].Value = " I01:0";
            dataGridView2.Rows[0].Cells[2].Value = " I03:0";

            /*Contenu par défaut de "CONTROL OUTPUT VOLTAGE"*/
            dataGridView3.Rows.Add(2);
            for (int i = 0; i < ctrl_output; i++)
            {
                cells_content = "!O";
                if (i < 9)
                {
                    cells_content += "0";
                }
                cells_content += ((i + 1) + ":0");
                dataGridView3.Rows[i / 16].Cells[i % 16].Value = cells_content;
            }

            /*Contenu par défaut de "CONTROL FORCE LOAD"*/
            dataGridView4.Rows.Add(2);
            Init_F_LOAD_Cells();

            /*Contenu par défaut de "CONTROL FORCE SENSORS"*/
            dataGridView5.Rows.Add(1);
            Init_F_SENSORS_Cells();

            /*Contenu par défaut de "CONTROL FORCE INPUT"*/
            dataGridView6.Rows.Add(1);
            Init_F_INPUT_Cells();
        }

        public void Init_F_LOAD_Cells()
        {
            string cells_content;

            bool isPCx = BenchTypeValue == "PC21" || BenchTypeValue == "PC12";
            UInt16 load_force = (UInt16)(isPCx ? 11 : 48);

            for (int i = 0; i < load_force; i++)
            {
                cells_content = "O";
                if (i < 9)
                {
                    cells_content += "0";
                }
                cells_content += ((i + 1) + ":Load");
                dataGridView4.Rows[i / 16].Cells[i % 16].Value = cells_content;

                dataGridView4.DefaultCellStyle.SelectionBackColor = Color.White;
                dataGridView4.Rows[i / 16].Cells[i % 16].Style.BackColor = Color.White;
            }
        }

        public void Init_F_SENSORS_Cells()
        {
            string cells_content;
            bool isPCx = BenchTypeValue == "PC21" || BenchTypeValue == "PC12";
            UInt16 force_sensor = (UInt16)(isPCx ? 18 : 24);

            for (int i = 0; i < force_sensor; i++)
            {
                if (BenchTypeValue == "PC12" || BenchTypeValue == "PC21")
                {
                    if(i < 6)
                    {
                        cells_content = "Wet";
                        cells_content += ((i%6 + 1) + ":NO");
                    }
                    else if(i < 6*2)
                    {
                        cells_content = "SH";
                        cells_content += ((i % 6 + 1) + ":NO");
                    }
                    else
                    {
                        cells_content = "Op";
                        cells_content += ((i % 6 + 1) + ":NO"); 
                    }
                    dataGridView5.Rows[i / 12].Cells[i % 12].Value = cells_content;
                }
                else 
                {
                    cells_content = "S";
                    cells_content += (i < 9) ? "0" : "";

                    cells_content += ((i + 1) + ":Far");
                    dataGridView5.Rows[i / 12].Cells[i % 12].Value = cells_content;
                }
                dataGridView5.DefaultCellStyle.SelectionBackColor = Color.White;
                dataGridView5.Rows[i / 12].Cells[i % 12].Style.BackColor = Color.White;
            }
        }

        public void Init_F_INPUT_Cells()
        {
            string cells_content;

            bool isPCx = BenchTypeValue == "PC21" || BenchTypeValue == "PC12";
            UInt16 force_input = (UInt16)(isPCx ? 12 : 18);

            int cols = dataGridView6.ColumnCount;
            int neededRows = (force_input + cols - 1) / cols;
            dataGridView6.Rows.Clear();
            for (int r = 0; r < neededRows; r++)
            {
                dataGridView6.Rows.Add();
            }

            for (int i = 0; i < force_input; i++)
            {
                cells_content = "I";
                if (i < 9)
                {
                    cells_content += "0";
                }
                cells_content += ((i + 1) + ":OFF");
                dataGridView6.Rows[i / 16].Cells[i % 16].Value = cells_content;

                dataGridView6.DefaultCellStyle.SelectionBackColor = Color.White;
                dataGridView6.Rows[i / 16].Cells[i % 16].Style.BackColor = Color.White;
            }
        }

        public void Read_supply_status()
        {
            byte data = 0; //Données lue

            /*Mise à jour de l'affichage de l'alim1*/
            if (alim1)
            {
                dataGridView1.Rows[0].Cells[2].Value = dataGridView1.Rows[0].Cells[2].Value.ToString().Replace("OFF", "ON");
            }
            else
            {
                dataGridView1.Rows[0].Cells[2].Value = dataGridView1.Rows[0].Cells[2].Value.ToString().Replace("ON", "OFF");
            }

            /*Mise à jour de l'affichage de l'alim2*/
            if (alim2)
            {
                dataGridView1.Rows[0].Cells[3].Value = dataGridView1.Rows[0].Cells[3].Value.ToString().Replace("OFF", "ON");
            }
            else
            {
                dataGridView1.Rows[0].Cells[3].Value = dataGridView1.Rows[0].Cells[3].Value.ToString().Replace("ON", "OFF");
            }

            /*Lecture de BENCH Supply 2*/
            if (this.board != null)
            {
                board.Read1DigitalInput(33, ref data);
            }

            if (!Convert.ToBoolean(data))
            {
                dataGridView1.Rows[0].Cells[3].Value = dataGridView1.Rows[0].Cells[3].Value.ToString().Replace(":0", ":1");
            }
            else
            {
                dataGridView1.Rows[0].Cells[3].Value = dataGridView1.Rows[0].Cells[3].Value.ToString().Replace(":1", ":0");
            }

            /*Lecture de +28Vdc-2*/
            if (this.board != null)
            {
                board.Read1DigitalInput(34, ref data);
            }

            if (!Convert.ToBoolean(data))
            {
                dataGridView1.Rows[0].Cells[1].Value = dataGridView1.Rows[0].Cells[1].Value.ToString().Replace(":0", ":1");
            }
            else
            {
                dataGridView1.Rows[0].Cells[1].Value = dataGridView1.Rows[0].Cells[1].Value.ToString().Replace(":1", ":0");
            }

            /*Lecture de BENCH Supply 1*/
            if (this.board != null)
            {
                board.Read1DigitalInput(35, ref data);
            }

            if (!Convert.ToBoolean(data))
            {
                dataGridView1.Rows[0].Cells[2].Value = dataGridView1.Rows[0].Cells[2].Value.ToString().Replace(":0", ":1");
            }
            else
            {
                dataGridView1.Rows[0].Cells[2].Value = dataGridView1.Rows[0].Cells[2].Value.ToString().Replace(":1", ":0");
            }

            /*Lecture de +28Vdc-1*/
            if (this.board != null)
            {
                board.Read1DigitalInput(36, ref data);
            }

            if (!Convert.ToBoolean(data))
            {
                dataGridView1.Rows[0].Cells[0].Value = dataGridView1.Rows[0].Cells[0].Value.ToString().Replace(":0", ":1");
            }
            else
            {
                dataGridView1.Rows[0].Cells[0].Value = dataGridView1.Rows[0].Cells[0].Value.ToString().Replace(":1", ":0");
            }
        }

        /***** Fonction qui colorise les cellules retour des entrées et des sorties *****/
        private void Color_Cells()
        {
            int i;
            bool isPCx = BenchTypeValue == "PC21" || BenchTypeValue == "PC12";
            UInt16 ctrl_input = (UInt16)(isPCx ? 12 : 18);
            UInt16 ctrl_output = (UInt16)(isPCx ? 11 : 48);

            /*Entrées*/
            for (i = 0; i < ctrl_input; i++)
            {
                var raw = dataGridView2.Rows[i / 16].Cells[i % 16].Value;
                string cur_cont = raw != null ? raw.ToString() : "";
                if ((cur_cont.Contains("!") && cur_cont.EndsWith("0")) || ((!cur_cont.Contains("!")) && cur_cont.EndsWith("1")))
                {
                    dataGridView2.Rows[i / 16].Cells[i % 16].Style.BackColor = Color.DeepSkyBlue;
                }
                else
                {
                    dataGridView2.Rows[i / 16].Cells[i % 16].Style.BackColor = Color.LightBlue;
                }
            }
            dataGridView2.CurrentCell = dataGridView2.Rows[0].Cells[0];
            dataGridView2.DefaultCellStyle.SelectionBackColor = dataGridView2.CurrentCell.Style.BackColor;

            /*Sorties*/
            for (i = 0; i < ctrl_output; i++)
            {
                var raw = dataGridView3.Rows[i / 16].Cells[i % 16].Value;
                string cur_cont = raw != null ? raw.ToString() : "";
                if ((cur_cont.Contains("!") && cur_cont.EndsWith("0")) || ((!cur_cont.Contains("!")) && cur_cont.EndsWith("1")))
                {
                    dataGridView3.Rows[i / 16].Cells[i % 16].Style.BackColor = Color.DeepSkyBlue;
                }
                else
                {
                    dataGridView3.Rows[i / 16].Cells[i % 16].Style.BackColor = Color.LightBlue;
                }
            }
            dataGridView3.CurrentCell = dataGridView3.Rows[0].Cells[0];
            dataGridView3.DefaultCellStyle.SelectionBackColor = dataGridView3.CurrentCell.Style.BackColor;
            
        }

        /*Evénement appelé lors du clik sur le bouton reset Load*/
        private void Load_button(object sender, EventArgs e)
        {
            DialogResult dialogResult = MessageBox.Show("FORCE LOAD - Are you sure to restore default values ?", "Default values", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
            bool isPCx = BenchTypeValue == "PC21" || BenchTypeValue == "PC12";
            UInt16 reset_output = (UInt16)(isPCx ? 11 : 48);
            if (dialogResult == DialogResult.Yes)
            {
                timer_feedback.Enabled = false; //désactivation du timer d'affichage des retours en mode manuel
                if (disp_fdbk.IsAlive)
                {
                    disp_fdbk.Join(); //Si le thread est encore en marche, on attend sa fin
                }

                Init_F_LOAD_Cells();

                /*Envoie des commandes de reset pour les sorties*/
                for (int k = 0; k < reset_output; k++)
                {
                    Cde_variable(1, k);
                }

                timer_feedback.Enabled = true;
            }
        }

        /*Evénement appelé lors du clik sur le bouton reset Sensors*/
        private void Sensor_button(object sender, EventArgs e)
        {
            DialogResult dialogResult = MessageBox.Show("FORCE SENSORS - Are you sure to restore default values ?", "Default values", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
            bool isPCx = BenchTypeValue == "PC21" || BenchTypeValue == "PC12";
            UInt16 force_sensor = (UInt16)(isPCx ? 18 : 24);
            if (dialogResult == DialogResult.Yes)
            {
                timer_feedback.Enabled = false; //désactivation du timer d'affichage des retours en mode manuel
                if (disp_fdbk.IsAlive)
                {
                    disp_fdbk.Join(); //Si le thread est encore en marche, on attend sa fin
                }

                Init_F_SENSORS_Cells();

                /*Envoie des commandes de reset pour les capteurs*/
                for (int k = 0; k < force_sensor; k++)
                {
                    Cde_variable(3, k);
                }

                timer_feedback.Enabled = true;
            }
            //DialogResult.No, on ignore
        }

        /*Evénement appelé lors du clik sur le bouton reset Input*/
        private void Input_button(object sender, EventArgs e)
        {
            DialogResult dialogResult = MessageBox.Show("FORCE INPUT - Are you sure to restore default values ?", "Default values", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
            bool isPCx = BenchTypeValue == "PC21" || BenchTypeValue == "PC12";
            UInt16 reset_input = (UInt16)(isPCx ? 12 : 18);
            if (dialogResult == DialogResult.Yes)
            {
                timer_feedback.Enabled = false; //désactivation du timer d'affichage des retours en mode manuel
                if (disp_fdbk.IsAlive)
                {
                    disp_fdbk.Join(); //Si le thread est encore en marche, on attend sa fin
                }
                
                Init_F_INPUT_Cells();

                /*Envoie des commandes de reset pour les entrées*/
                for (int k = 0; k < reset_input; k++)
                {
                    Cde_variable(2, k);
                }

                timer_feedback.Enabled = true;
            }
            //DialogResult.No, on ignore
        }

        /*Appuie sur le bouton "Reset (F3)"*/
        private void Reset_button(object sender, EventArgs e)
        {
            DialogResult dialogResult = MessageBox.Show("Are you sure to do a system reset ?", "Reset", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
            if (dialogResult == DialogResult.Yes)
            {
                timer_feedback.Enabled = false; //désactivation du timer d'affichage des retours en mode manuel
                if (disp_fdbk.IsAlive)
                {
                    disp_fdbk.Join(); //Si le thread est encore en marche, on attend sa fin
                }

                Init_F_LOAD_Cells();
                Init_F_SENSORS_Cells();
                Init_F_INPUT_Cells();
                Cde_reset();

                Read_supply_status(); //Fonction qui va lire le status et mettre à jour l'affichage des alims

                timer_feedback.Enabled = true;
            }
        }

        /*Onglet LOG - Click sur le bouton "refresh"*/
        private void Refresh_button(object sender, EventArgs e)
        {
            bool dirExist = Directory.Exists(@"./LOG/");
            string[] filePaths;
            int i = 0;

            /*Réinitialisation quand appuie sur "Refresh"*/
            groupBox10.Enabled = false;
            groupBox11.Enabled = false;
            groupBox11.Text = "LOG Files";
            dataGridView7.Rows.Clear();
            //richTextBox1.SelectionAlignment = HorizontalAlignment.Center;
            richTextBox1.Text = "Select a log file to display preview";

            if (dirExist) //On test si le dossier LOG existe
            {
                filePaths = Directory.GetFiles(@"./LOG/", "*.LOG");
                if (filePaths.Length != 0) //Test si le dossier comporte des fichiers
                {
                    if (filePaths.Length > 1) //Condition obligée car dataGridView7.Rows.Add(1-1) ne fonctionne pas (cas où 1 fichier log)
                    {
                        dataGridView7.Rows.Add(filePaths.Length - 1);
                    }
                    groupBox11.Enabled = true;
                    groupBox11.Text = "LOG Files (" + filePaths.Length + " files)";
                    toolStripStatusLabel1.Text = filePaths.Length + " log files founded";

                    foreach (string name in filePaths)
                    {
                        dataGridView7.Rows[i].Cells[0].Value = name;
                        i++;
                    }
                }
                else
                {
                    MessageBox.Show("No log files in LOG folder", "Log files", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                }
            }
            else
            {
                MessageBox.Show("LOG folder doesn't exist","LOG Folder",MessageBoxButtons.OK,MessageBoxIcon.Error);
            }
        }

        /*Evénement produit lors d'un click sur une cellule du tableau LOG*/
        private void Control_Panel_Log_Files(object sender, DataGridViewCellEventArgs e)
        {
            if (dataGridView7.CurrentCell.Selected)
            {
                StreamReader logfile = new StreamReader(@dataGridView7.CurrentCell.Value.ToString());
                string filecontent = logfile.ReadToEnd();

                groupBox10.Enabled = true;
                richTextBox1.Text = filecontent;

                logfile.Close(); //Fermeture du fichier
            }
        }
        
        public void Cde_reset()
        {
            bool isPCx = BenchTypeValue == "PC21" || BenchTypeValue == "PC12";
            UInt16 ctrl_input = (UInt16)(isPCx ? 12 : 18);
            UInt16 ctrl_output = (UInt16)(isPCx ? 11 : 48);
            UInt16 force_sensor = (UInt16)(isPCx ? 18 : 24);
            /*Remise à zéro de la fenêtre graphique*/
            Init_F_INPUT_Cells();
            Init_F_LOAD_Cells();
            Init_F_SENSORS_Cells();

            alim1 = false;
            alim2 = false;

            /*Envoie des commandes pour le reset au banc*/
            Send_Address("1101", 16); //Offset de 16 pins pour arriver aux 4 pins : alim1, alim2, reset, data
            //attente de 5000 microsecondes (plus stable que la fonction Sleep() et DateTime.Now)
            sw.Reset(); sw.Start();
            microseconds = sw.ElapsedTicks / (Stopwatch.Frequency / (1000L * 1000L));
            while (microseconds < 5000) {microseconds = sw.ElapsedTicks / (Stopwatch.Frequency / (1000L * 1000L));}

            Send_Address("1111", 16);
            //attente de 5000 microsecondes (plus stable que la fonction Sleep() et DateTime.Now)
            sw.Reset(); sw.Start();
            microseconds = sw.ElapsedTicks / (Stopwatch.Frequency / (1000L * 1000L));
            while (microseconds < 5000) { microseconds = sw.ElapsedTicks / (Stopwatch.Frequency / (1000L * 1000L)); }

            

            /*Envoie des commandes de reset pour les sorties*/
            for (int k = 0; k < ctrl_output; k++)
            {
                Cde_variable(1, k);
            }

            /*Envoie des commandes de reset pour les entrées*/
            for (int k = 0; k < ctrl_input; k++)
            {
                Cde_variable(2, k);
            }

            /*Envoie des commandes de reset pour les capteurs*/
            for (int k = 0; k < force_sensor; k++)
            {
                Cde_variable(3, k);
            }
        }

        /*Fonction qui prépare la donnée à envoyer en fonction des étant présents dans les dataGrid*/
        public void Cde_variable(int IOS, int i)
        {
            /* IOS = 1 --> Output **************************/
            /* IOS = 2 --> Input ***************************/
            /* IOS = 3 --> Sensor **************************/
            /* i --> numéro de l'entrée / sortie / capteur */
            
            string cell;
            int toSend, var; //var contient 1, 2, 3, 4 ou 5 en fonction de l'état de la variable pointée
            bool isPCx = BenchTypeValue == "PC12" || BenchTypeValue == "PC21";

            switch (IOS)
            {
                /*Gestion sorties*/
                case 1:
                    cell = dataGridView4.Rows[i / 16].Cells[i % 16].Value.ToString();

                    if (cell.Contains("Open")) //Open
                    {
                        //var = 3;
                        //var = 3;
                        //var = 1; --> semblait OK avec les test du 04/09/13
                        var = 1;
                    }
                    else if (cell.Contains("Load")) //Load (ETAT INITIAL DES SORTIES)
                    {
                        //var = 1;
                        //var = 2;
                        //var = 3; --> semblait OK avec les test du 04/09/13
                        var = 2;
                    }
                    else //Short
                    {
                        //var = 2;
                        //var = 1;
                        //var = 2; --> semblait OK avec les test du 04/09/13
                        var = 3;
                    }

                    Send_Address("0", 16); //Mise à 0 du bit data

                    /*** adr_O[i] + 1 ***/
                    //On prépositionne l'adresse avec les 3 bits de sélection inactifs ('1')
                    toSend = (Convert.ToUInt16(adr_O[i], 16) + 1) | Convert.ToUInt16("0F00", 16);
                    Send_Address(Convert.ToString(toSend, 2), 0);
                    //Envoie de l'adresse avec bit de sélection actif ('0')
                    Send_Address(Convert.ToString(Convert.ToUInt16(adr_O[i], 16) + 1, 2), 0);
                    //--> VOIR SI BESOIN DE METTRE UN DELAI ENTRE LE MOMENT OU LES 3 BITS DE SELCTION PASSENT DE ACTIFS A INACTIFS
                    //On prépositionne l'adresse avec les 3 bits de sélection inactifs ('1')
                    toSend = (Convert.ToUInt16(adr_O[i], 16) + 1) | Convert.ToUInt16("0F00", 16);
                    Send_Address(Convert.ToString(toSend, 2), 0);

                    /*** adr_O[i] ***/
                    //On prépositionne l'adresse avec les 3 bits de sélection inactifs ('1')
                    toSend = Convert.ToUInt16(adr_O[i], 16) | Convert.ToUInt16("0F00", 16);
                    Send_Address(Convert.ToString(toSend, 2), 0);
                    //Envoie de l'adresse avec bit de sélection actif ('0')
                    Send_Address(Convert.ToString(Convert.ToUInt16(adr_O[i], 16), 2), 0);
                    //--> VOIR SI BESOIN DE METTRE UN DELAI ENTRE LE MOMENT OU LES 3 BITS DE SELCTION PASSENT DE ACTIFS A INACTIFS
                    //On prépositionne l'adresse avec les 3 bits de sélection inactifs ('1')
                    toSend = Convert.ToUInt16(adr_O[i], 16) | Convert.ToUInt16("0F00", 16);
                    Send_Address(Convert.ToString(toSend, 2), 0);

                    if (var > 1)
                    {
                        Send_Address("1", 16); //Mise à 1 du bit data

                        /*** adr_O[i] + 1 ***/
                        //On prépositionne l'adresse avec les 3 bits de sélection inactifs ('1')
                        toSend = (Convert.ToUInt16(adr_O[i], 16) + 1) | Convert.ToUInt16("0F00", 16);
                        Send_Address(Convert.ToString(toSend, 2), 0);
                        //Envoie de l'adresse avec bit de sélection actif ('0')
                        Send_Address(Convert.ToString(Convert.ToUInt16(adr_O[i], 16) + 1, 2), 0);
                        //--> VOIR SI BESOIN DE METTRE UN DELAI ENTRE LE MOMENT OU LES 3 BITS DE SELCTION PASSENT DE ACTIFS A INACTIFS
                        //On prépositionne l'adresse avec les 3 bits de sélection inactifs ('1')
                        toSend = (Convert.ToUInt16(adr_O[i], 16) + 1) | Convert.ToUInt16("0F00", 16);
                        Send_Address(Convert.ToString(toSend, 2), 0);

                        if (var > 2)
                        {
                            /*** adr_O[i] ***/
                            //On prépositionne l'adresse avec les 3 bits de sélection inactifs ('1')
                            toSend = Convert.ToUInt16(adr_O[i], 16) | Convert.ToUInt16("0F00", 16);
                            Send_Address(Convert.ToString(toSend, 2), 0);
                            //Envoie de l'adresse avec bit de sélection actif ('0')
                            Send_Address(Convert.ToString(Convert.ToUInt16(adr_O[i], 16), 2), 0);
                            //--> VOIR SI BESOIN DE METTRE UN DELAI ENTRE LE MOMENT OU LES 3 BITS DE SELCTION PASSENT DE ACTIFS A INACTIFS
                            //On prépositionne l'adresse avec les 3 bits de sélection inactifs ('1')
                            toSend = Convert.ToUInt16(adr_O[i], 16) | Convert.ToUInt16("0F00", 16);
                            Send_Address(Convert.ToString(toSend, 2), 0);
                        }
                    }
                    break;

                /*Gestion entrées*/
                case 2:
                    cell = dataGridView6.Rows[i / 16].Cells[i % 16].Value.ToString();

                    if (cell.Contains("OFF")) //OFF (ETAT INITIAL DES ENTREES)
                    {
                        var = 1;
                    }
                    else //ON
                    {
                        var = 2;
                    }

                    //if (var == 2)
                    if (var == 2)
                    {
                        Send_Address("1", 16); //Mise à 1 du bit data
                    }
                    else
                    {
                        Send_Address("0", 16); //Mise à 0 du bit data
                    }

                    /*** adr_I[i] ***/
                    //On prépositionne l'adresse avec les 3 bits de sélection inactifs ('1')
                    toSend = Convert.ToUInt16(adr_I[i], 16) | Convert.ToUInt16("0F00", 16);
                    Send_Address(Convert.ToString(toSend, 2), 0);
                    //Envoie de l'adresse avec bit de sélection actif ('0')
                    Send_Address(Convert.ToString(Convert.ToUInt16(adr_I[i], 16), 2), 0);
                    //--> VOIR SI BESOIN DE METTRE UN DELAI ENTRE LE MOMENT OU LES 3 BITS DE SELCTION PASSENT DE ACTIFS A INACTIFS
                    //On prépositionne l'adresse avec les 3 bits de sélection inactifs ('1')
                    toSend = Convert.ToUInt16(adr_I[i], 16) | Convert.ToUInt16("0F00", 16);
                    Send_Address(Convert.ToString(toSend, 2), 0);
                    break;

                /*Gestion capteurs*/
                case 3:
                    if (!isPCx)
                    {
                        cell = dataGridView5.Rows[i / 12].Cells[i % 12].Value.ToString();

                        if (cell.Contains("Far")) //Far (ETAT INITIAL DES CAPTEURS)
                        {
                            //var = 4;
                            //var = 5;
                            var = 1;
                        }
                        else if (cell.Contains("Near")) //Near
                        {
                            //var = 5;
                            //var = 4;
                            var = 2;
                        }
                        else if (cell.Contains("Med")) //Med
                        {
                            //var = 3;
                            //var = 3;
                            var = 3;
                        }
                        else if (cell.Contains("Open")) //Open
                        {
                            //var = 1;
                            //var = 2;
                            var = 4;
                        }
                        else //Short
                        {
                            //var = 2;
                            //var = 1;
                            var = 5;
                        }

                        Send_Address("0", 16); //Mise à 0 du bit data

                        /*** adr_C[i] ***/
                        //On prépositionne l'adresse avec les 3 bits de sélection inactifs ('1')
                        toSend = Convert.ToUInt16(adr_C[i], 16) | Convert.ToUInt16("0F00", 16);
                        Send_Address(Convert.ToString(toSend, 2), 0);
                        //Envoie de l'adresse avec bit de sélection actif ('0')
                        Send_Address(Convert.ToString(Convert.ToUInt16(adr_C[i], 16), 2), 0);
                        //--> VOIR SI BESOIN DE METTRE UN DELAI ENTRE LE MOMENT OU LES 3 BITS DE SELCTION PASSENT DE ACTIFS A INACTIFS
                        //On prépositionne l'adresse avec les 3 bits de sélection inactifs ('1')
                        toSend = Convert.ToUInt16(adr_C[i], 16) | Convert.ToUInt16("0F00", 16);
                        Send_Address(Convert.ToString(toSend, 2), 0);

                        /*** adr_C[i] + 1 ***/
                        //On prépositionne l'adresse avec les 3 bits de sélection inactifs ('1')
                        toSend = (Convert.ToUInt16(adr_C[i], 16) + 1) | Convert.ToUInt16("0F00", 16);
                        Send_Address(Convert.ToString(toSend, 2), 0);
                        //Envoie de l'adresse avec bit de sélection actif ('0')
                        Send_Address(Convert.ToString(Convert.ToUInt16(adr_C[i], 16) + 1, 2), 0);
                        //--> VOIR SI BESOIN DE METTRE UN DELAI ENTRE LE MOMENT OU LES 3 BITS DE SELCTION PASSENT DE ACTIFS A INACTIFS
                        //On prépositionne l'adresse avec les 3 bits de sélection inactifs ('1')
                        toSend = (Convert.ToUInt16(adr_C[i], 16) + 1) | Convert.ToUInt16("0F00", 16);
                        Send_Address(Convert.ToString(toSend, 2), 0);

                        /*** adr_C[i] + 2 ***/
                        //On prépositionne l'adresse avec les 3 bits de sélection inactifs ('1')
                        toSend = (Convert.ToUInt16(adr_C[i], 16) + 2) | Convert.ToUInt16("0F00", 16);
                        Send_Address(Convert.ToString(toSend, 2), 0);
                        //Envoie de l'adresse avec bit de sélection actif ('0')
                        Send_Address(Convert.ToString(Convert.ToUInt16(adr_C[i], 16) + 2, 2), 0);
                        //--> VOIR SI BESOIN DE METTRE UN DELAI ENTRE LE MOMENT OU LES 3 BITS DE SELCTION PASSENT DE ACTIFS A INACTIFS
                        //On prépositionne l'adresse avec les 3 bits de sélection inactifs ('1')
                        toSend = (Convert.ToUInt16(adr_C[i], 16) + 2) | Convert.ToUInt16("0F00", 16);
                        Send_Address(Convert.ToString(toSend, 2), 0);

                        /*** adr_C[i] + 3 ***/
                        //On prépositionne l'adresse avec les 3 bits de sélection inactifs ('1')
                        toSend = (Convert.ToUInt16(adr_C[i], 16) + 3) | Convert.ToUInt16("0F00", 16);
                        Send_Address(Convert.ToString(toSend, 2), 0);
                        //Envoie de l'adresse avec bit de sélection actif ('0')
                        Send_Address(Convert.ToString(Convert.ToUInt16(adr_C[i], 16) + 3, 2), 0);
                        //--> VOIR SI BESOIN DE METTRE UN DELAI ENTRE LE MOMENT OU LES 3 BITS DE SELCTION PASSENT DE ACTIFS A INACTIFS
                        //On prépositionne l'adresse avec les 3 bits de sélection inactifs ('1')
                        toSend = (Convert.ToUInt16(adr_C[i], 16) + 3) | Convert.ToUInt16("0F00", 16);
                        Send_Address(Convert.ToString(toSend, 2), 0);

                        if (var != 4)
                        {
                            Send_Address("1", 16); //Mise à 1 du bit data

                            /*** adr_C[i] + 2 ***/
                            //On prépositionne l'adresse avec les 3 bits de sélection inactifs ('1')
                            toSend = (Convert.ToUInt16(adr_C[i], 16) + 2) | Convert.ToUInt16("0F00", 16);
                            Send_Address(Convert.ToString(toSend, 2), 0);
                            //Envoie de l'adresse avec bit de sélection actif ('0')
                            Send_Address(Convert.ToString(Convert.ToUInt16(adr_C[i], 16) + 2, 2), 0);
                            //--> VOIR SI BESOIN DE METTRE UN DELAI ENTRE LE MOMENT OU LES 3 BITS DE SELCTION PASSENT DE ACTIFS A INACTIFS
                            //On prépositionne l'adresse avec les 3 bits de sélection inactifs ('1')
                            toSend = (Convert.ToUInt16(adr_C[i], 16) + 2) | Convert.ToUInt16("0F00", 16);
                            Send_Address(Convert.ToString(toSend, 2), 0);

                            Send_Address("0", 16); //Mise à 0 du bit data

                            if (var != 1)
                            {
                                /*** adr_C[i] + var - 2 ***/
                                //On prépositionne l'adresse avec les 3 bits de sélection inactifs ('1')
                                toSend = (Convert.ToUInt16(adr_C[i], 16) + var - 2) | Convert.ToUInt16("0F00", 16);
                                Send_Address(Convert.ToString(toSend, 2), 0);
                                //Envoie de l'adresse avec bit de sélection actif ('0')
                                Send_Address(Convert.ToString(Convert.ToUInt16(adr_C[i], 16) + var - 2, 2), 0);
                                //--> VOIR SI BESOIN DE METTRE UN DELAI ENTRE LE MOMENT OU LES 3 BITS DE SELCTION PASSENT DE ACTIFS A INACTIFS


                                Send_Address("1", 16); //Mise à 1 du bit data

                                toSend = (Convert.ToUInt16(adr_C[i], 16) + var - 2) | Convert.ToUInt16("0F00", 16);
                                Send_Address(Convert.ToString(toSend, 2), 0);
                            }
                        }
                    }
                    else
                    {
                        Send_Address("0", 16); //Mise à 0 du bit data
                        int idx = 11 + i;

                        ushort addr = (ushort)(Convert.ToUInt16(adr_O[idx], 16) + 1);
                        Send_Address(Convert.ToString((ushort)(0x0F00 | addr), 2), 0);
                        Send_Address(Convert.ToString(addr, 2), 0);
                        if (dataGridView5.Rows[i / 12].Cells[i % 12].Value.ToString().Contains("YES"))
                        {
                            Send_Address("1", 16);
                            addr = (ushort)(Convert.ToUInt16(adr_O[idx], 16) + 1);
                            Send_Address(Convert.ToString((ushort)(0x0F00 | addr), 2), 0);
                            Send_Address(Convert.ToString(addr, 2), 0);
                        }
                    }
                    break;

                default:
                    break;
            }
        }                       

        /*Fonction qui reçoit l'adresse à envoyer en string et l'envoie bit à bit à la carte*/
        public void Send_Address(string address, int offset)
        {
            int size;
            string temp = "";

            if (this.board != null)
            {
                if (offset == 0) //Si on écris une adresse
                {
                    if (address.Length < 11) //Et que cette adresse fait moins de 11 bits
                    {
                        size = 11 - address.Length;
                        for (int i = 0; i < size; i++) //On complète les bits de poids fort par des "0" pour arriver à 11 bits
                        {
                            temp += "0";
                        }

                        address += address;
                    }
                }

                //attente de 1 microsecondes (plus stable que la fonction Sleep() et DateTime.Now)
                sw.Reset(); sw.Start();
                microseconds = sw.ElapsedTicks / (Stopwatch.Frequency / (1000L * 1000L));
                while (microseconds < 1) { microseconds = sw.ElapsedTicks / (Stopwatch.Frequency / (1000L * 1000L)); }

                if (this.board != null)
                {
                    for (int i = 0; i < address.Length; i++)
                    {
                        if (address[address.Length - (i + 1)] == '0')
                        {
                            board.Set1DigitalOutputOff((ushort)(i + offset));
                        }
                        else
                        {
                            board.Set1DigitalOutputOn((ushort)(i + offset));
                        }
                    }
                }

                sw.Reset();
                sw.Start();
                //Thread.Sleep(1);
                //Thread.Sleep(1);
                /*for (int j = 0; j < 100000; j++)
                {
                    j = j;
                }*/
            }
        }

        private void Form1_FormClosing(object sender, FormClosingEventArgs e)
        {
            timer_feedback.Enabled = false;
            if (disp_fdbk != null && disp_fdbk.IsAlive)
            {
                disp_fdbk.Join();
            }
                
            try //On essaie de fermer la Form3 (possible que si elle a été créé)
            {
                if (Application.OpenForms["Form3"] != null)
                {
                    /*Fermeture de la fenêtre d'envoie des commandes*/
                    DispCommands.Close();

                    /*Test si l'utilisateur a confirmé ou non l'arrêt du processus d'envoie des commandes*/
                    if (!DispCommands.IsDisposed)
                    {
                        e.Cancel = true;
                    }
                    else
                    {
                        if (disp_fdbk.IsAlive) // Si le thread n'est pas déjà fini
                        {
                            disp_fdbk.Join(); // On attend que le thread soit terminé
                        }
                        Send_Address("1", 16 + 2); //Désactivation alim1
                        Send_Address("1", 16 + 3); //Désactivation alim2
                    }
                }
            }
            catch (NullReferenceException ex)
            {
                //On récupère l'exeption si la Form3 n'est pas ouverte
                ex.ToString();

                if (disp_fdbk.IsAlive) // Si le thread n'est pas déjà fini
                {
                    disp_fdbk.Join(); // On attend que le thread soit terminé
                }
                Send_Address("1", 16 + 2); //Désactivation alim1
                Send_Address("1", 16 + 3); //Désactivation alim2
            }
            finally
            {
            }

        }
    }
}
